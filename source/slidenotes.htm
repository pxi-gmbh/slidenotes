<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no">
  <title>Slidenote-Editor</title>
  <!--<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon" />
  <link rel="icon" href="/favicon.ico" type="image/x-icon" />-->
  <link rel="stylesheet" href="editor.css">
  <link rel="stylesheet" href="themes/slidenoteguardian.css">
  <link rel="stylesheet" href="themes/keyboardshortcuts.css">
  <link rel="stylesheet" href="slidenoteplayer.css">
  <script language="javascript" src="slidenotes.js"></script>
  <script language="javascript" src="themes/dialoger.js"></script>
  <script language="javascript" src="mongoguardian.js"></script>
  <script language="javascript" src="slidenoteguardian-mongo.js"></script>
  <script>
    var slidenoteguardian;
    var slidenote;

    //some test-things:
    function testinit(){
      setTimeout('initeditor()',100);
      return;
        slidenoteguardian.loadedSlidenotes = [{title:"new note",url:"/home/mochilera/Dokumente/jkop/design/marie/editor/marie.htm"},
        {title:"test",url:"dev.slidenotes.io/slidenote/3"},
        {title:"dinosaurier heute",url:"dev.slidenotes.io/slidenotes/dinosaurier"}];
        slidenoteguardian.loadedPresentations = [{title:"test", date:"testdate",id:"10",slidenote:"3",url:"testurl"}];

        menumanager.init();
    }

    var menumanager = {};
    menumanager.menus = new Array();
    menumanager.menuByName = function(name){
        for(var x=0;x<this.menus.length;x++)if(this.menus[x].name===name)return this.menus[x];
    }
    menumanager.buildSlidenoteList = function(){
      if(!slidenoteguardian)return;
      var menudiv = this.menuByName("menuload");
      var menu = document.getElementById("notelist");
      var menuparent = menu.parentElement;
      menu.innerHTML= "";
      var delbutton = document.getElementById("deletebutton");
      var renbutton = document.getElementById("renamebutton");
      var chpwbutton = document.getElementById("changepasswordbutton");
      var actntitle = document.getElementById("actnotetitle");
      actntitle.innerText = slidenoteguardian.notetitle;
      //append functions to buttons:
      delbutton.onclick = function(){
        let contenttext = "do you wish to delete the slidenote?<br>";
        if(slidenoteguardian.loadedPresentations.length>0){
          contenttext+="this will also delete all presentations generated by this slidenote stored in our cloud.";
          contenttext+="<br>this action cannot be undone!";
          contenttext+="<br><br>";
          contenttext+="presentations generated by this slidenote: ";
          for(var x=0;x<slidenoteguardian.loadedPresentations.length;x++){
            contenttext+='"'+slidenoteguardian.loadedPresentations[x].title+'"';
            if(x<slidenoteguardian.loadedPresentations.length-1){
              contenttext+=" , ";
            }
          }
        }
        let cdiv = document.createElement("div");
        cdiv.innerHTML = contenttext;

        var dialogoptions = {
          type:"confirm",
          title:"delete slidenote",
          content:cdiv,
          confirmbutton:"delete",
          cssclass: "small"
        };
        dialoger.buildDialog(dialogoptions,function(){
          let nid = slidenoteguardian.restObject.nid;
          if(!nid)return;
          //window.location.href="/node/"+nid+"/delete";
        //  slidenoteguardian.deleteFromRest("/node/"+nid, function(){
          //  window.location.href="/editor";
          //});
          mongoguardian.deleteSlidenote();
        });
      };
      renbutton.onclick = function(){
        slidenoteguardian.passwordPrompt("Enter new Name","rename").then(function(value){
          slidenoteguardian.saveNote("cms");
        }, function(error){});
      };
      chpwbutton.onclick = function(){
        // slidenoteguardian.passwordPrompt("password","changepassword").then(function(value){
        slidenoteguardian.passwordPrompt("","changepassword").then(function(value){
          //change the slidenoteguardian-password:
          slidenoteguardian.password = value;
          //reset images enc-status so they encrypt with new password:
          var b64imor = slidenote.base64images.base64images;
          for(var bx=0;bx<b64imor.length;bx++){
            b64imor[bx].encrypt = undefined;
          }
          //state restObject as to delete all images:
          slidenoteguardian.restObject.reencrypt = true;
          //re-encrypt all revisions:
          //not implemented yet
          //save directly:
          slidenoteguardian.saveNote("cms");
          //focus on textarea:
          slidenote.textarea.focus();
        }, function(value){});
      };

      var list = slidenoteguardian.loadedSlidenotes;
      for(var x=0;x<list.length;x++){
        //if(url.indexOf(location.pathname)>-1)continue;//lod.classList.add("actnotebutton");
        var title = list[x].title;
        //var url = encodeURI(decodeURI(decodeURI(list[x].url)));
        var nid = list[x].nid;//url.substring(url.lastIndexOf("/")+1);
        var url = list[x].url;
        if(nid!=undefined && nid==slidenoteguardian.restObject.nid)continue;
        if(slidenoteguardian.tutorialNr !=undefined && slidenoteguardian.tutorialNr==x)continue;
        var li=document.createElement("li");
        var lod = document.createElement("a");
        lod.classList.add("loadnotebutton");
        lod.classList.add("menuitem");
        lod.innerText = title;
        lod.title = title;
        if(nid)lod.href=window.location.pathname+"?id="+nid;
        if(url)lod.href=window.location.pathname+"?tutorial="+url;
        li.appendChild(lod);
        menu.appendChild(li);
      }

    }

    menumanager.buildPublishedMenu = function(){
        var menu = document.getElementById("publishedlist");
        menu.innerHTML = "";
        if(location.search.indexOf("tutorial")>-1)return; //dont build published menu on tutorials
        var list = slidenoteguardian.loadedPresentations;
        if(list.length===0){
          var li = document.createElement("li");
          li.innerText = "no published presentation of this slidenote";
          menu.appendChild(li);
          return;
        }
        for(var x=0;x<list.length;x++){
            var title=list[x].title;
            var url = list[x].url;
            var li = document.createElement("li");
            var del = document.createElement("button");
            var lod = document.createElement("a");
            var cpl = document.createElement("button");
            lod.classList.add("menuitem");
            lod.classList.add("loadnotebutton");
            lod.target = '_blank';
            del.classList.add("menuitem");
            cpl.classList.add("menuitem");
            del.classList.add("circle");
            var delimg = new Image();
            delimg.src = "images/buttons/minus.svg";
            delimg.alt = "delete presentation >>>"+title+"";
            del.appendChild(delimg);
            var deltext = document.createElement("div");
            deltext.innerText = "delete";
            del.appendChild(deltext);
            del.targeturl = url;
            del.onclick = function(){

                //if(confirm("are you shure you want to delete selected slidenote?"))
                var dialogoptions = {
                  type: "confirm",
                  title:"delete presentation",
                  content:"do you wish to delete the published presentation?",
                  confirmbutton:"delete",
                  cssclass: "small"
                };
                var delete_url = this.targeturl;
                dialoger.buildDialog(dialogoptions, async function(){
                  //location.href=this.targeturl;
                  let resp = await mongoguardian.deletePresentation(delete_url);
                  if(!resp || !resp.error){
                   //remove from loadedPresentations:
                   for(var x=0;x<slidenoteguardian.loadedPresentations.length;x++){
                     if(slidenoteguardian.loadedPresentations[x].url===delete_url){
                       slidenoteguardian.loadedPresentations.splice(x,1);
                       menumanager.buildPublishedMenu();
                       break;
                     }
                   }
                  }
                });

            }
            var lodtitle = document.createElement("div");
            lodtitle.innerText = list[x].title;
            var loddate = document.createElement("div");
            loddate.innerText = localeDateString(list[x].creationDate);
            let comments = list[x].enccomments;
            var commenttext = "";
            if(comments && comments.length>0)commenttext = comments.length+" comments";
            if(commenttext==="")commenttext = "no comments so far";
            var lodcomment = document.createElement("div");
            lodcomment.innerText = commenttext;
            lod.appendChild(lodtitle);
            lod.appendChild(loddate);
            lod.appendChild(lodcomment);
            lod.href = '/presentation.htm?'+url;
            //lod.targeturl = url;
            //lod.onclick = function(){
                //TODO: put save question here
            //    location.href=this.targeturl;
            //}
            cpl.classList.add("copylink");
            var cplimg = new Image();
            cplimg.src = "images/buttons/publish.svg";
            cplimg.alt = "copy link of presentation >>>"+title;
            cpl.appendChild(cplimg);
            var cpltext = document.createElement("div");
            cpltext.innerText="copy link";
            cpl.appendChild(cpltext);
            cpl.value = location.protocol+'//'+location.host+'/presentation.htm?'+url;
            cpl.onclick = function(){
                var text = this.value;
                var input = document.createElement('input');
                input.setAttribute('value', text);
                document.body.appendChild(input);
                input.select();
                var result = document.execCommand('copy');
                document.body.removeChild(input)
                console.log("copied "+text+" to clipboard:"+result);
                var oldlinkcopied = document.getElementById("linkcopyalert");
                if(oldlinkcopied)oldlinkcopied.parentElement.removeChild(oldlinkcopied);
                var linkcopied = document.createElement("div");
                var linktext = document.createElement("span");
                linktext.innerText = "link copied";
                var svgcheck = document.getElementById("cloud-ok");
                linkcopied.innerHTML = svgcheck.innerHTML;
                linkcopied.appendChild(linktext);
                linkcopied.id = "linkcopyalert";
                this.appendChild(linkcopied);
                setTimeout(function(){
                  var oldlinkcopied = document.getElementById("linkcopyalert");
                  if(oldlinkcopied)oldlinkcopied.parentElement.removeChild(oldlinkcopied);
                }, 6000);
            }
            li.appendChild(lod);
            li.appendChild(del);
            li.appendChild(cpl);
            menu.appendChild(li);
        }
    }

    menumanager.showPresentationOptionsDialog = function(){
      var dialogoptions = {
        type:"dialog",
        title:"slide design",
        content: "design-list",
        closebutton:true,
        cssclass:"presentationoptionsdialog",
        arrownavleftright:true
      };
      dialogoptions.content = this.buildPresentationMenu();
      dialoger.buildDialog(dialogoptions);
    };

    menumanager.buildPresentationMenu = function(){
      var cssthemes = slidenote.extensions.CssThemes();
      var list = document.createElement("ul");//document.getElementById("basicthemelist");
      list.innerHTML = "";
      for(var x=0;x<cssthemes.length;x++){
        var li = document.createElement("li");
        var title = document.createElement("div");
        title.innerText = cssthemes[x].classname;
        title.classList.add("themepreviewtitle");
        var radio = document.createElement("input");
        radio.type = "radio";
        radio.name = "basictheme";
        radio.value = cssthemes[x].classname;
        radio.tabable = false;
        if(cssthemes[x].active){
          radio.checked = true;
          li.id="presentationoptionactiveradio";
        } else radio.checked=false;
        var preview = document.createElement("div");
        preview.classList.add("themepreview");
        if(cssthemes[x].previewImage){
          let previmg = new Image();
          previmg.src=('themes/'+cssthemes[x].classname+'.png');
          preview.appendChild(previmg);
        }else{
          preview.classList.add(cssthemes[x].classname);
          preview.innerHTML="<div>Welcome</div><p>to Slidenotes</p>";
        }
        title.title=cssthemes[x].description;
        radio.title=cssthemes[x].description;
        preview.title=cssthemes[x].description;
        radio.onchange = function(){
          slidenote.extensions.changeThemeStatusByClassname(this.value,this.checked);
          slidenoteguardian.saveConfig("local");
          //set li to active:
          var oldli = document.getElementById("presentationoptionactiveradio");
          if(oldli)oldli.id="";

          this.parentElement.id="presentationoptionactiveradio";
        }
        var previewcontainer = document.createElement("button");
        previewcontainer.classList.add("themepreviewcontainer");
        previewcontainer.appendChild(preview);
        li.appendChild(previewcontainer);
        li.appendChild(radio);
        li.appendChild(title);
        li.onclick = function(e){
          var radio = this.getElementsByTagName("input")[0];
          if(e.target != radio)radio.click();
        }
        list.appendChild(li);
      }
      return list;
    }

    menumanager.init = function(){
        document.getElementById("presentationoptionsbutton").onclick = function(){
          menumanager.showPresentationOptionsDialog();
        }
        var menus = ["menuload","menucloud","menupublish","menuimportexport", "menuoptionseditor","toolbar", "imagegallery", "menusearchbox"]; //, "menuoptionspresentation"
        this.standardmenus = menus;
        var menubuttons = ["loadnote","cloud","publishbutton","importexportbutton", "optionsbutton","toolbarbutton", "imagegallerybutton","searchbutton"]; //,"presentationoptionsbutton"
				var editorblockfade = document.getElementById('editorblockfade');
				for(var x=0;x<menus.length;x++){
            var button = document.getElementById(menubuttons[x]);
            var menu = document.getElementById(menus[x]);
            this.menus.push({name:menus[x],menu:menu,button:button});
            button.menu = menus[x];
            menu.button = menubuttons[x];
          //  if(menus[x]==="menuoptionspresentation")button.addEventListener("click",function(){
          //    slidenote.menumanager.buildPresentationMenu();
          //  });
            button.onclick = function(e){
                var menus = document.getElementsByClassName("autohidemenu");
                var menu  = document.getElementById(this.menu);
                if(menu.classList.contains('autohideright')){
                  let rightmenus = document.querySelectorAll('.autohideright.active');
                  for(var x=rightmenus.length-1;x>=0;x--){
                    if(rightmenus[x]!=menu)rightmenus[x].classList.remove('active');
                    document.getElementById(rightmenus[x].button).classList.remove('active');
                  }
                }
                for(var x=0;x<menus.length;x++)if(menus[x]!=menu){
                    menus[x].classList.remove("active");
                    if(menus[x].button)
                    document.getElementById(menus[x].button).classList.remove("active");
                }
                if(menu===null||menu===undefined)return;
                if(menu.classList.contains("active")){
                  //closing menu
                    menu.classList.remove("active");
                    this.classList.remove("active");
										//return to standard focus behavior of editorblock
										if(this.menu == "menusearchbox" || this.menu == "toolbar"){
											editorblockfade.classList.remove('nofade');
										}
                } else{
                  //opening menu
                    if(this.menu==="imagegallery"){
                      slidenote.base64images.buildImageGallery();
                    }
										//unfading the editorblock
										if(this.menu == "menusearchbox" || this.menu == "toolbar"){
											editorblockfade.classList.add('nofade');
										}
                    menu.classList.add("active");
                    this.classList.add("active");
                var firstbutton = menu.getElementsByClassName("focusitem");
                if(firstbutton.length<1)firstbutton = menu.getElementsByClassName("menuitem");
                if(firstbutton.length<1)firstbutton = menu.getElementsByTagName("button");
                if(firstbutton.length<1)return;
                //menu.ontransitionend = function(){
                setTimeout(function(){
                  firstbutton[0].focus();
                },300); //we have to wait till transition is over
                //}
              }
            } //end of on-click
            if(menus[x]!="toolbar" && menus[x]!="menusearchbox" && menus[x]!="imagegallery"){
                menu.classList.add("autohidemenu");
                //menu.onblur = function(){console.log("test onblur");this.classList.remove("active");};
                //menu.onfocusout = function(){console.log("test onfocusout");this.classList.remove("active");};
            }
        }
        document.getElementById("slidenotediv").addEventListener("click",function(event){
        console.log(event.target);
        var activemenu = document.querySelector(".autohidemenu.active");
        if(activemenu)var actbutton = document.getElementById(activemenu.button);
        console.log(activemenu);
        if(activemenu==null ||
          (event.target && activemenu && activemenu.contains(event.target))||
          (actbutton && actbutton.contains(event.target))){
          console.log("found");
          return;
        }
        //return;
        //document.getElementsByTagName("textarea")[0].addEventListener("focus",function(event){
            var menus = document.getElementsByClassName("autohidemenu");
            for(var x=0;x<menus.length;x++){
                menus[x].classList.remove("active");
                if(menus[x].button)
                document.getElementById(menus[x].button).classList.remove("active");
            }
        });
        this.buildSlidenoteList();
        var editorsel = document.getElementById("editorchoice");
        editorsel.onkeydown = function(e){if(e.key==="ArrowUp"||e.key==="ArrowDown")e.preventDefault();};
        editorsel.onkeypress = function(e){if(e.key==="ArrowUp"||e.key==="ArrowDown")e.preventDefault();};
        editorsel.onkeyup = function(e){if(e.key==="ArrowUp"||e.key==="ArrowDown")e.preventDefault();};
        //more buttons: night-mode toggle:
        document.getElementById("nightmodetoggle").onclick = function(){
            //var sleditor = document.getElementById("slidenoteeditor");
            var slbody = document.getElementsByTagName("body")[0];
            if(slbody.classList.contains("nightmode")){
                slbody.classList.remove("nightmode");
                slbody.style.background = "unset";
            }  else {
              slbody.classList.add("nightmode");
              slbody.style.background="black";
            }
            if(slidenoteguardian){
              slidenoteguardian.saveConfig("local");
            }
        }
        document.getElementById("findinput").addEventListener("keydown",function(e){
          if(e.key!="Enter")return;
          document.getElementById("findbutton").click();
          this.focus();
        });
        document.getElementById("findbutton").onclick = function(){
          var searchinput = document.getElementById("findinput")
          var searchtext = searchinput.value;
          var resultdiv = document.getElementById("searchresult");
          var selstart = slidenote.textarea.selectionStart;
          var selend = slidenote.textarea.selectionEnd;
          if(!searchtext || !searchtext.length || searchtext.length===0)return;
          var resultcount;
          var searchflag = "";
          var nextresult = {};
          var actcursor = {
            start:slidenote.textarea.selectionStart,
            end:slidenote.textarea.selectionEnd
          };
          var sc = slidenote.textarea.value;
          var searchmode = document.getElementById("searchinputchoice").value;
          if(searchmode ==="regex"){
            if(searchtext.charAt(0)==="/"&&searchtext.indexOf("/",1)>-1){
              //regex
              //parse regex and searchtext should only be the pattern-part
              var tmpsearchflag = searchtext.substring(searchtext.indexOf("/",1)+1);
              searchtext = searchtext.substring(1,searchtext.indexOf("/",1));
              var allowedflags = ['i','m'];
              for(var fx=0;fx<allowedflags.length;fx++)if(tmpsearchflag.indexOf(allowedflags[fx])>-1)searchflag+=allowedflags[fx];
            }
            nextresult.searchtext = searchtext;
            var findregex = new RegExp(searchtext,searchflag);
            let scshort = sc.substring(selstart+1);
            var tmppos = scshort.search(findregex);
            var actm = scshort.match(findregex);

            if(tmppos>-1)tmppos+=selstart+1; else{
            tmppos = sc.search(findregex);
            actm = sc.match(findregex);
            }
            if(tmppos>-1)nextresult.startpos = tmppos;
            console.log(actm);
            if(actm){
              nextresult.searchtext = actm[0];
              nextresult.regExString = "/"+searchtext+"/"+searchflag;
            }
            var rcex = new RegExp(searchtext,"g"+searchflag);
            resultcount = sc.match(rcex);
            if(resultcount)resultcount = resultcount.length; else resultcount =0;
          }else{
            //standard search
            if(searchmode==="normal"){
              searchtext = searchtext.replace(/\\n/g,"\n");
            }
            nextresult = {
              startpos: sc.indexOf(searchtext,actcursor.end),
              searchtext:searchtext
            };
            if(nextresult.startpos===-1)nextresult.startpos = sc.indexOf(searchtext);
            var actpos = 0;
            resultcount=0;
            while(sc.indexOf(searchtext,actpos)>-1){
              actpos=sc.indexOf(searchtext,actpos)+1;
              resultcount++;
            }
          }
          var resulttext = " result found for '";
          if(resultcount!=1)resulttext = " results found for '";
          if(nextresult.regExString)resulttext+="Regular Expression "+nextresult.regExString+"', actual Result:'";
          resultdiv.innerText = resultcount + resulttext + nextresult.searchtext+"'";
          document.getElementById("findinput").foundTerm = nextresult.searchtext;
          if(nextresult.startpos >-1){
            slidenote.textarea.selectionStart = nextresult.startpos;
            slidenote.textarea.selectionEnd = nextresult.startpos + nextresult.searchtext.length;
            slidenote.scrollToPosition();
            console.log("parseneu forced by searchbox");
            slidenote.parseneu();
            slidenote.textarea.focus();
            this.focus();
          }
        }//end of findbutton.onclick

        document.getElementById("replacebutton").onclick = function(){
          var ta = slidenote.textarea;
          var text = ta.value;
          var actselstart = slidenote.textarea.selectionStart;
          var actselend = slidenote.textarea.selectionEnd;
          var actsel = text.substring(actselstart,actselend);
          var actsearch = document.getElementById("findinput").foundTerm;

          var matches = (actsearch===actsel)
          var actreplace = document.getElementById("replaceinput").value;
          console.log("replace current selected "+actsel+" with "+actreplace+"? "+matches);
          actreplace = actreplace.replace(/\\n/g,"\n");
          if(!matches)console.log("replace aborted. actsearch:"+actsearch);
          if(matches){
            text = text.substring(0,actselstart)+actreplace+text.substring(actselend);
            ta.value = text;
            ta.setSelectionRange(actselstart,actselstart+actreplace.length);
            console.log("parseneu forced by search-replace");
            slidenote.parseneu();
          }
          document.getElementById("findbutton").click();
          this.focus();
        }
        document.getElementById("replaceinput").onclick = function(){
          document.getElementById("findbutton").click();
          this.focus();
        }
        document.getElementById("replaceinput").addEventListener("keydown",function(e){
          if(e.key!="Enter")return;
          document.getElementById("replacebutton").click();
        });
        document.getElementById("replaceallbutton").onclick = function(){
          var rpb = document.getElementById("replacebutton");
          var res = document.getElementById("searchresult");
          var text = slidenote.textarea.value;
          var findinput = document.getElementById("findinput").value;
          var replinput = document.getElementById("replaceinput").value;
          var searchpattern = findinput;
          var searchflag = "g";
          var searchmode = document.getElementById("searchinputchoice").value;
          if(searchmode ==="regex"){
            if(findinput.charAt(0)==="/" && findinput.indexOf("/",1)>-1){
              searchpattern = findinput.substring(1,findinput.indexOf("/",1));
              let parsedsearchflag = findinput.substring(searchpattern.length+2);
              var allowedflags = ['i','m'];
              for(var fx=0;fx<allowedflags.length;fx++)if(parsedsearchflag.indexOf(allowedflags[fx])>-1)searchflag+=allowedflags[fx];
            }
            var rex = new RegExp(searchpattern,searchflag);
            var matchcount = text.match(rex);
            if(matchcount)matchcount = matchcount.length;
            text = text.replace(rex,replinput);
          }else{
            searchpattern = searchpattern.replace(/\\n/g,"\n");
            var rit = replinput.replace(/\\n/g,"\n");
            var actpos=text.length-1;
            var matchcount = 0;
            while(actpos>=0 && text.lastIndexOf(searchpattern,actpos)>-1){
              actpos = text.lastIndexOf(searchpattern,actpos);
              text = text.substring(0,actpos)+rit+text.substring(actpos+findinput.length);
              matchcount++;
              actpos--;
            }
          }
          slidenote.textarea.value = text;
          res.innerText = matchcount + " instances of '"+findinput+"' replaced with '"+replinput+"'";
          slidenote.parseneu();
          this.focus();
        }
        /*
        //temporary here to have it available on monday, TODO: delete this part:
        document.getElementById("praesentationrahmen").onkeydown = function(event){

          //Keyboardsteuerung der Slideshow:
          var key=""+event.key;
          if(key==="undefined")key=getKeyOfKeyCode(event.keyCode);
          //console.log("keycode of pressed key:"+key);
          if(key==="Escape")slidenote.presentation.showpresentation();
          if(key==="ArrowRight" || key===" ")presentation.nextPage();
          if(key==="ArrowLeft")presentation.lastPage();
          if(key==="0" ||key==="1" ||key==="2" ||key==="3" ||key==="4" ||key==="5" ||key==="6" ||key==="7" ||key==="8" ||key==="9" ){
            if(presentation.lastpressednrkey==undefined)presentation.lastpressednrkey="";
            presentation.lastpressednrkey+=key;
          }
          if(key==="Enter"){
            presentation.lastpressednrkey--;
            console.log(presentation.lastpressednrkey);
            presentation.showPage(presentation.lastpressednrkey);
            presentation.lastpressednrkey="";
          }
        };
        */
    }

    function initeditor(){
        //console.log("focus on editor");
        if(slidenote==null){
            var texted = 		document.getElementById("quelltext");
    		    var texterr =		 document.getElementById("texteditorerrorlayer");
    		    var slideshow = 	document.getElementById("praesentation");
            if(texted===null||texterr==null||slideshow===null){
                console.log("something is missing...");
                setTimeout("initeditor()",500);
                return;
            }else{
                slidenote = new slidenotes(texted,texterr,null,slideshow);
                presentation = slidenote.presentation;
    			      texted.onresize= function(){slidenote.parseneu();};
    			      texted.onkeydown= function(event){
    				          slidenote.keypressdown(event, texted);
    			      };
        			texted.onkeyup=function(event){slidenote.keypressup(event, texted);};
        			texted.onpaste=function(){setTimeout('slidenote.parseneu()',150)};
        			texted.oncut=function(){setTimeout('slidenote.parseneu()',150)};
        			//autofocus tonfocus="initeditor(this.value);
        			texted.onscroll=function(){slidenote.scroll(texted);};
        			texted.onclick = function(){
                setTimeout(''+
                'console.log("parseneu forced by click"+ slidenote.textarea.selectionEnd);'+
                'console.log("click on:"+slidenote.textarea.selectionStart + "/"+slidenote.textarea.selectionEnd);'+
                'slidenote.parseneu();'
               ,1);
              };
        			texted.addEventListener("focus",function(){
        				var carret = document.getElementById("carret");
        				if(carret)carret.classList.remove("unfocused");
                var sel = document.getElementsByClassName("selectioncarretmarker");
                if(sel.length===0)return;
                for(var x=sel.length-1;x>=0;x--){
                  //sel[x].parentElement.removeChild(sel[x]);
                  //sel[x].classList.add("hiddenselectioncarretmarker");
                  var seltxt = sel[x].parentElement.innerHTML;
                  //console.log(seltxt);
                  seltxt = seltxt.replace('<u class="selectioncarretmarker">','');
                  seltxt = seltxt.replace('</u>','');
                  //console.log("ergebnis:"+seltxt);
                  sel[x].parentElement.innerHTML = seltxt;
                  //sel[x].classList.remove("selectioncarretmarker");
                }
                //slidenote.parseneu();

        			});
        			texted.addEventListener("focusout",function(){
        				var carret = document.getElementById("carret");
        				if(carret)carret.classList.add("unfocused");
        				//console.log("onblur show carret");
        				//console.log(carret);
                //adding selection-marking:
                var selstart = slidenote.textarea.selectionStart;
                var selend = slidenote.textarea.selectionEnd;
                if(selend-selstart!=0){
                  var startline = slidenote.parser.lineAtPosition(selstart);
                  var endline = slidenote.parser.lineAtPosition(selend);
                  var bglines = document.getElementsByClassName("backgroundline");
                  var startpos = selstart - slidenote.parser.map.linestart[startline];
                  var endpos = selend - slidenote.parser.map.linestart[endline];
                  //set end: (first end because of changes later on)
                  /*var changesinline = slidenote.parser.mdcodeeditorchanges[endline];
                  var inspos = endpos;
                  for(var x=0;x<changesinline.length;x++){
                    if(startpos>=changesinline[x].pos){
                      inspos+=changesinline[x].html.length;
                      if(changesinline[x].typ==="<")inspos--;
                    }
                  }
                  var txt = bglines[endline].innerHTML;
                  txt = txt.substring(0,inspos)+'<u class="selectioncarretmarker">'+txt.substring(inspos);
                  bglines[endline].innerHTML = txt;
                  */
                  //helper function: do all changes:
                  function applychanges(changes, text){
                    var txt=text;
                    for(var x=0;x<changes.length;x++){
                      txt = txt.substring(0,changes[x].pos)+changes[x].html+txt.substring(changes[x].pos);
                    }
                    return txt;
                  }
                  //set start:
                  var changesinline = new Array();
                  var changesinendline = new Array();
                  for(var x=0;x<slidenote.parser.mdcodeeditorchanges.length;x++){
                    if(slidenote.parser.mdcodeeditorchanges[x].typ==="cursor")continue;
                    if(slidenote.parser.mdcodeeditorchanges[x].line===startline)changesinline.push(slidenote.parser.mdcodeeditorchanges[x]);
                    if(slidenote.parser.mdcodeeditorchanges[x].line===endline)changesinendline.push(slidenote.parser.mdcodeeditorchanges[x]);
                  }
                  var inspos = startpos;
                  for(var x=0;x<changesinline.length;x++){
                    if(startpos>changesinline[x].pos){
                      inspos+=changesinline[x].html.length;
                      if(changesinline[x].typ==="<")inspos--;
                    }
                  }
                  var txt = bglines[startline].innerHTML;
                  if(slidenote.parser.lineswithhtml[startline]==="code")txt = applychanges(changesinline,slidenote.parser.sourcecode.split("\n")[startline]);
                  txt = txt.substring(0,inspos)+'<u class="selectioncarretmarker">'+txt.substring(inspos);
                  var starthtml = txt;
                  txt=bglines[endline].innerHTML;
                  if(slidenote.parser.lineswithhtml[endline]==="code")txt = applychanges(changesinline,slidenote.parser.sourcecode.split("\n")[endline]);
                  var inspos2 = endpos;
                  for(var x=0;x<changesinendline.length;x++){
                    var ch = changesinendline[x];
                    if(endpos>ch.pos){
                      inspos2+=ch.html.length;
                      if(ch.typ==="<")inspos2--;
                    }
                  }
                  if(startline===endline){
                    var carretstart = txt.indexOf('<span id="carret"');
                    var carretend = txt.indexOf('</span>',carretstart)+'</span>'.length;
                    var carretlength = carretend - carretstart;
                    if(carretstart===-1)carretlength=0;
                    inspos2+=carretlength;
                  }
                  txt = txt.substring(0,inspos2)+"</u>"+txt.substring(inspos2);
                  if(startline===endline)txt = txt.substring(0,inspos)+'<u class="selectioncarretmarker">'+txt.substring(inspos);
                  var endhtml = txt;
                  if(startline!=endline){
                    starthtml+="</u>";
                    bglines[startline].innerHTML = starthtml;
                    endhtml = '<u class="selectioncarretmarker">'+endhtml;
                  }
                  bglines[endline].innerHTML = endhtml;
                  //bglines[startline].innerHTML = txt;
                  //set in-between:
                  if(startline!=endline){
                    for(var x=startline+1;x<endline;x++){
                      if(bglines[x].classList.contains("pagebreak")){
                        var pbtxt = bglines[x].innerHTML;
                        pbtxt = '<u class="selectioncarretmarker">---</u>' + pbtxt.substring(3);
                        bglines[x].innerHTML = pbtxt;
                      }else bglines[x].innerHTML = '<u class="selectioncarretmarker">'+bglines[x].innerHTML+'</u>';
                    }
                  }

                }
        			});
              document.getElementById("importbutton").addEventListener("click",function(){
                var impb = document.getElementById("importfile");
                impb.value="";
                impb.click();
              });
              console.log("slidenote-object created");
              console.log(slidenote);
              slidenote.menumanager = menumanager;
              slidenote.menumanager.init();
              slidenote.extensions.addAfterLoadingThemesHook(function(){
        				slidenoteguardian = new slidenoteGuardian(slidenote);
        			});
              //adding texteditorrahmensetzen on windows-resize
              window.addEventListener("resize",function(){
                slidenote.texteditorrahmensetzen();
                //console.log("resize happened");
              });
              //add android-hacks
              if(navigator.userAgent.toLowerCase().indexOf('android')>-1){
                document.body.classList.add('android');
                //alert('you are using android!\n'+navigator.userAgent+"\n");
                //no resize on fullscreen, therefore not valid on fullscreen
                window.addEventListener('resize',function(e){
                  slidenote.androidDisplayChangeHack(e);
                });
                slidenote.androidDisplayChangeHack();
                slidenote.androidhack = {};
                //remove keyboard-listening from devices:
                var editorsel = document.getElementById("editorchoice");
                editorsel.onkeydown = undefined;
                editorsel.onkeypress = undefined;
                editorsel.onkeyup = undefined;

                /*dialogue does not work!
                why not?
                let dialogoptions = {
                  type: "confirm",
                  content: 'we are working hard to get android supported fully. until now its kind of buggy. if you experience errors try raw-modus to avoid problems',
                  confirmbutton: 'switch to raw modus',
                  cancelbutton: 'continue with normal mode',
                }
                dialoger.buildDialog(dialogoptions, function(){
                  slidenote.choseEditor('raw-text');
                });
                if(confirm('we are working hard to get android supported fully. until now its kind of buggy. if you experience errors try raw-modus to avoid problems. switch to raw-modus?')){
                  slidenote.choseEditor('raw-text');
                }
                */
                /*

                window.addEventListener('focus',slidenote.androidOnTextareaFocus);
                window.addEventListener('blur', slidenote.androidLeaveTextareaFocus);
                */
              }
          }
        }
    }
    function insertbutton(code){
    	if(slidenote!=null)slidenote.insertbutton(code);
    }
  </script>
</head>


<body onload="testinit()">
  <script>
    //load nightmode as fast as possible
    var cfg = localStorage.getItem("config");
    if(cfg && cfg.indexOf('nightmode":true')>-1)document.body.classList.add("nightmode");
  </script>

  <div id="slidenotediv" class="initial">

    <div id="slidenoteeditor">
      <nav id="noteinfoarea">
        <button id="cloud">
          <!--  <img id="savestatus" src="images/buttons/cloud.svg"> -->

          <div id="cloud-box">
            <svg viewBox="0 0 34 19" class="cloud-box-element">
        			    <g transform="matrix(1,0,0,1,0.000534427,0.000239369)">
        			        <g transform="matrix(1,0,0,1,-1656.12,-83.708)">
        			            <g class="cloud-shape" transform="matrix(1,0,0,1,1660,82.969)">
        			                <path d="M15.02,0.781C22.037,1.413 22.594,8.451 22.594,8.451C24.925,7.775 27.439,8.739 28.72,10.8C30.925,14.373 29.854,16.472 27.12,17.8C24.386,19.128 3.931,19.343 -0.732,17.8C-5.395,16.257 -4.563,8.77 -0.256,6.491C4.051,4.212 6.208,6.839 6.208,6.839C6.208,6.839 8,0.148 15.02,0.781Z"/>
        			            </g>
        			        </g>
        			    </g>
          	</svg>

          	<!-- nur das div hier beinhält das loading icon -->
          	<div id="cloud-syncing" class="cloud-box-element">
          				<svg viewBox="0 0 34 19">
          					<circle class="loader-path" cx="16" cy="10" r="3.8" fill="none"/>
          				</svg>
          	</div>
              <!-- nur das div hier beinhält den Haken -->
          	<div id="cloud-ok"class="cloud-box-element">
      				<svg viewBox="0 0 34 19">
      					<path id="check-path" d="M10,10 l3,3 l8,-5" />
      				</svg>
      			</div>
              <!-- nur das div hier beinhält das x -->
          	<div id="cloud-error" class="cloud-box-element">
      				<svg viewBox="0 0 34 19">
      					<path id="x-path1" d="M13,14 l8,-7" />
      					<path id="x-path2" d="M13,7 l8,7" />
      				</svg>
          	</div>
            <div id="cloud-undefined" class="cloud-box-element">
              <!--<div>°</div>-->
      				<svg viewBox="0 0 34 19">
      					<circle id="cloud-undefined-path" cx="17" cy="11" r="2"></circle>
      				</svg>
            </div>
          </div>
        </button>
        <button id="loadnote" alt="slidenote list" title="slidenote list">
          <div>
            <span id="slidenotetitle">new note</span>
            <svg width="100%" height="100%" viewBox="0 0 24 24" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" xmlns:serif="http://www.serif.com/" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2;"><circle id="Ellipse_46" class="meta-button-backgr" cx="11.656" cy="11.656" r="11.656" style=""/><path class="meta-button-inside" d="M7.07,9.847c0.266,0.024 0.505,0.14 0.688,0.335l3.782,4.265c0,0 4.092,-4.178 4.092,-4.178c0.756,-0.644 2.233,0.408 1.427,1.396c-1.563,1.697 -3.227,3.299 -4.841,4.948c-0.393,0.378 -1.023,0.383 -1.421,0.009c-1.562,-1.659 -3.024,-3.409 -4.536,-5.114c-0.518,-0.622 -0.181,-1.691 0.809,-1.661Z" style="fill:#fff;"/></svg>
          </div>
        </button>
        <button id="outlet">95 Words, 12 Pages,<br> 120 Seconds to read...</button>
      </nav>
      <main id="editorblock">
        <div id="texteditorerrorlayer"></div>
    	  <textarea spellcheck="false" id="quelltext" onload="" autofocus         onfocus="setTimeout('initeditor()',100);"></textarea>
				<div id="editorblockfade"></div>
        <textarea id="helperTextarea" name="name" rows="1" disabled></textarea>
      </main>
      <div id="buttonarearight">
        <button class="fluidbutton" id="searchbutton" title="search">
          <img class="nightmode-hidden" src="images/buttons/search.svg" alt="open search and replace menu">
          <img class="nightmode-only" src="images/buttons/search_dark.svg" alt="open search and replace menu">
          <img class="nightmode-hidden active" src="images/buttons/search_active.svg" alt="close search">
          <img class="nightmode-only active" src="images/buttons/search_dark_active.svg" alt="close search">
        </button>
        <button class="fluidbutton" id="toolbarbutton" title="toolbar">
          <img class="nightmode-hidden" src="images/buttons/toolbar.svg" alt="toolbar">
          <img class="nightmode-only" src="images/buttons/toolbar_dark.svg" alt="toolbar">
          <img class="nightmode-hidden active" src="images/buttons/toolbar_active.svg" alt="close toolbar">
          <img class="nightmode-only active" src="images/buttons/toolbar_dark_active.svg" alt="close toolbar">
        </button>
        <button class="fluidbutton" id="imagegallerybutton" title="image gallery">
          <img class="nightmode-hidden" src="images/buttons/image-gallery.svg" alt="image gallery">
          <img class="nightmode-only" src="images/buttons/image-gallery_dark.svg" alt="image gallery">
          <img class="nightmode-hidden active" src="images/buttons/image-gallery_active.svg" alt="close image gallery">
          <img class="nightmode-only active" src="images/buttons/image-gallery_dark_active.svg" alt="close image gallery">
        </button>
        <button class="fluidbutton" id="historyBackButton" title="undo">
          <img class="nightmode-hidden" src="images/buttons/undo.svg" alt="undo">
          <img class="nightmode-only" src="images/buttons/undo_dark.svg" alt="undo">
        </button>
        <button class="fluidbutton" id="historyForwardButton" title="redo">
          <img class="nightmode-hidden" src="images/buttons/redo.svg" alt="redo">
          <img class="nightmode-only" src="images/buttons/redo_dark.svg" alt="redo">
        </button>
        <button class="fluidbutton closebutton" id="buttonarearightclose" onclick="document.getElementById('buttonarearight').classList.remove('active');document.getElementById('menusearchbox').classList.remove('active');document.getElementById('imagegallery').classList.remove('active');">
          <img src="images/buttons/x.svg" alt="back">
        </button>
      </div>
      <button id="buttonarearightbutton" onclick="document.getElementById('buttonarearight').classList.toggle('active');">
        <img class="nightmode-hidden" src="images/buttons/mob_edit_open.svg">
        <img class="nightmode-only" src="images/buttons/mob_edit_open_dark.svg">
        <span>edit</span>
      </button>
      <div id="toolbar" class="autohideright">
        <div class="arrow_box" id="texteditorbuttons">
          <div class="screenreader-only">Toolbar</div>
          <ul id="toolbarbuttons">
      			<li><button name="newslide" class="menuitem basicbutton" onclick="insertbutton('---')" title="new slide"><img src="images/buttons/newslide.svg" alt="new slide"><span class="buttonmdcode">---</span><span class="toolbarbuttontitle"> new slide</span></button></li>

      			<li><button name="title" class="menuitem basicbutton" onclick="insertbutton('%head1')" title="title"><img src="images/buttons/hash-h1.svg" alt="Title"><span class="buttonmdcode">#</span> <span class="toolbarbuttontitle"> headline</span></button></li>

      			<li><button name="italic" class="menuitem basicbutton" onclick="insertbutton('*')" title="italic"><img src="images/buttons/italic.svg" alt="italic"><span class="buttonmdcode">*</span><span class="toolbarbuttontitle italic">italic</span><span class="buttonmdcode">*</span></button></li>

      			<li><button name="bold" class="menuitem basicbutton" onclick="insertbutton('**')" title="bold"><img src="images/buttons/bold.svg" alt="bold"><span class="buttonmdcode">**</span><span class="toolbarbuttontitle bold">bold</span><span class="buttonmdcode">**</span></button></li>

      			<li><button name="crossed" class="menuitem" onclick="insertbutton('~~')" title="crossed"><img src="images/buttons/stroke.svg" alt="stroke"><span class="buttonmdcode">~~</span><span class="toolbarbuttontitle deleted">deleted</span><span class="buttonmdcode">~~</span></button></li>

            <li><button name="marked" class="menuitem" onclick="insertbutton('~')" title="mark text"><img src="images/buttons/mark.svg" alt="mark"><span class="buttonmdcode">~</span><span class="toolbarbuttontitle marked"><mark>mark</mark></span><span class="buttonmdcode">~</span></button></li>

      			<li><button name="ulist" class="menuitem basicbutton" onclick="insertbutton('%list')" title="unordered list"><img src="images/buttons/ul.svg" alt="list"><span class="buttonmdcode">- </span><span class="toolbarbuttontitle">list</span></button></li>

      			<li><button name="olist" class="menuitem" onclick="insertbutton('%nrlist')" title="ordered list"><img src="images/buttons/ol.svg" alt="ordered list"><span class="buttonmdcode">1. </span><span class="toolbarbuttontitle">ordered list</span></button></li>

      			<li><button name="quote" class="menuitem basicbutton" onclick="insertbutton('%quote')" title="quote"><img src="images/buttons/quote.svg" alt="quote"><span class="buttonmdcode">&gt; </span><span class="toolbarbuttontitle">quote</span></button></li>

      			<li><button name="footnote" class="menuitem" onclick="insertbutton('%footnote')" title="footnote"><img src="images/buttons/footnote.svg" alt="footnote"><span class="buttonmdcode">[^*]</span><span class="toolbarbuttontitle"> footnote</span></button></li>

      			<li><button name="comment" class="menuitem" onclick="insertbutton('%comment')" title="comment"><img src="images/buttons/comment.svg" alt="comment"><span class="buttonmdcode">//</span> <span class="toolbarbuttontitle">comment</span></button></li>

      			<li><button name="inlinecode" class="menuitem" onclick="insertbutton('%inlinecode')" title="inline-code"><img src="images/buttons/code.svg" alt="code"><span class="buttonmdcode">`</span><span class="toolbarbuttontitle inlinecode">inline code</span><span class="buttonmdcode">`</span></button></li>
            <li><button name="code" class="menuitem" onclick="insertbutton('%codeblock')" title="code-block"><img src="images/buttons/codeblock.svg" alt="code"><span class="buttonmdcode">+++code+++</span><span class="toolbarbuttontitle code"></span><span class="buttonmdcode"></span></button></li>

      			<li><button name="link" class="menuitem" onclick="insertbutton('%link')" title="hyperlink"><img src="images/buttons/link.svg" alt="link"><span class="buttonmdcode">[</span><span class="toolbarbuttontitle">link</span><span class="buttonmdcode">](url)</span></button></li>

          </ul>
          <button class="fluidbutton closebutton" id="toolbarclose" onclick="document.getElementById('toolbar').classList.remove('active');">
            <img src="images/buttons/mob_edit_close.svg" alt="back">
          </button>
        </div>
      </div>
      <div id="imagegallery" class="autohideright">
        <div id="imagegallerybox" class="arrow_box">
          <div>image gallery</div>
          <button class="plusbutton"  title="add image to imagegallery">
            <img src="images/buttons/plus.svg"><span>add image</span>
          </button>
        </div>
      </div>
      <div id="optionarea">

        <button class="fluidbutton closebutton" id="optionareaclose" onclick="document.getElementById('optionarea').classList.remove('active');">
          <img src="images/buttons/x.svg" alt="back">
        </button>
        <button id="importexportbutton">
          <!--<img src="images/buttons/import-export.svg"><br>import&<br>export-->
          <!-- file button-->
          <svg height="100%" viewBox="0 0 31 31" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" xmlns:serif="http://www.serif.com/" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2;">
            <circle id="Ellipse_46" class="meta-button-backgr" cx="15.5" cy="15.5" r="15.5"/>
            <path d="M17.668,24.952l-7.565,0c-1.35,0 -2.446,-1.096 -2.446,-2.446c0,0 0,-10.082 0,-10.082c0,-1.35 1.096,-2.446 2.446,-2.446l0.52,0l0,-0.967c0,-1.35 1.096,-2.446 2.446,-2.446l7.566,0c1.35,0 2.445,1.096 2.445,2.446c0,0 0,10.082 0,10.082c0,1.35 -1.095,2.446 -2.445,2.446l-0.521,0l0,0.967c0,1.35 -1.096,2.446 -2.446,2.446Zm0.005,-13.489l-7.566,0c-0.431,0 -0.795,0.29 -0.909,0.685c-0.027,0.087 -0.041,0.18 -0.041,0.276l0,10.082c0,0.522 0.424,0.946 0.946,0.946l7.565,0c0.432,0 0.796,-0.289 0.909,-0.684c0.027,-0.088 0.041,-0.18 0.041,-0.277l0,-10.082c0,-0.522 -0.423,-0.946 -0.945,-0.946Zm2.962,-3.398l-7.566,0c-0.522,0 -0.946,0.424 -0.946,0.946l0,0.967l5.545,0c0.277,0.002 0.551,0.046 0.813,0.139c0.692,0.244 1.251,0.802 1.495,1.494c0.092,0.262 0.136,0.536 0.138,0.813l0,7.615l0.521,0c0.522,0 0.945,-0.424 0.945,-0.946l0,-10.082c0,-0.522 -0.423,-0.946 -0.945,-0.946Z" class="meta-button-inside" />
          </svg>
          <br><span>file</span>
        </button>
        <button id="publishbutton" title="Open Publish Menu">
          <!--<img src="images/buttons/publish.svg">-->
          <!-- PUBLISH BUTTON -->
          <svg height="100%" viewBox="0 0 31 31" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" xmlns:serif="http://www.serif.com/" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2;">
            <circle id="Ellipse_46" class="meta-button-backgr" cx="15.5" cy="15.5" r="15.5"/>
            <path id="Ellipse_44" class="meta-button-inside" d="M16.899,10.587c-0.019,-0.131 -0.028,-0.265 -0.028,-0.401c0,-1.607 1.304,-2.911 2.911,-2.911c1.607,0 2.911,1.304 2.911,2.911c0,1.607 -1.304,2.911 -2.911,2.911c-0.931,0 -1.761,-0.438 -2.294,-1.119l-5.931,3.389c0.141,0.367 0.219,0.764 0.219,1.18c0,0.169 -0.013,0.335 -0.038,0.497l5.689,3.251c0.529,-0.728 1.387,-1.201 2.355,-1.201c1.607,0 2.911,1.304 2.911,2.911c0,1.607 -1.304,2.911 -2.911,2.911c-1.607,0 -2.911,-1.304 -2.911,-2.911c0,-0.098 0.005,-0.196 0.014,-0.292l-5.716,-3.267c-0.594,0.833 -1.568,1.376 -2.668,1.376c-1.808,0 -3.275,-1.467 -3.275,-3.275c0,-1.808 1.467,-3.275 3.275,-3.275c0.849,0 1.623,0.324 2.205,0.854l6.193,-3.539Z"/>
          </svg>
          <br><span>publish</span>
        </button>
        <button id="optionsbutton">
          <!--<img src="images/buttons/options.svg">-->
          <!-- OPTIONS BUTTON -->
          <svg height="100%" viewBox="0 0 31 31" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" xmlns:serif="http://www.serif.com/" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2;">
            <circle id="Ellipse_46" class="meta-button-backgr" cx="15.5" cy="15.5" r="15.5"/>
            <path class="meta-button-inside" d="M15.41,8.194c-3.863,0 -7,3.137 -7,7c0,3.863 3.137,7 7,7c3.863,0 7,-3.137 7,-7c0,-3.863 -3.137,-7 -7,-7Zm0,2c2.76,0 5,2.24 5,5c0,2.76 -2.24,5 -5,5c-2.76,0 -5,-2.24 -5,-5c0,-2.76 2.24,-5 5,-5Z"/>
          </svg>
          <br><span>options</span>
        </button>
      </div>
      <button id="optionareabutton" onclick="document.getElementById('optionarea').classList.toggle('active');">
        <img src="images/buttons/mob_meta_open.svg">
        <span>meta</span>
      </button>
      <div id="sidebarcontainer">
        <div id="sidebar"></div>
        <div id="nicesidebarsymbol">
          <button id="nicesidebarsymbolcontainer" onclick="slidenote.presentation.showInsertMenu();">
            <span id="nicesidebarsymbollabel"></span>
            <img src="images/buttons/arrow-down_single.svg" alt="open Elements Menu">
          </button>
          <img id="cursorlinearrow" class="nightmode-hidden" src="images/buttons/context-menu-arrow.svg">
          <img id="cursorlinearrow" class="nightmode-only" src="images/buttons/context-menu-arrow_dark.svg">
          <img id="cursorlinearrow-mobile" class="nightmode-hidden" src="images/buttons/mob_context-menu-arrow.svg">
          <img id="cursorlinearrow-mobile" class="nightmode-only" src="images/buttons/mob_context-menu-arrow_dark.svg">
          <div id="cursorlinearrow-mobile-active" >
            <img class="nightmode-hidden" src="images/buttons/mob_context-menu-arrow_open.svg">
            <img class="nightmode-only" src="images/buttons/mob_context-menu-arrow_open_dark.svg">
          </div>

          <div id="insertarea">
            <div id="insertmenulabel" class="screenreader-only"></div>
    		    <div id="standardinsertmenu">
              <!--<button class="newpagebutton" onclick="insertbutton('---')" >new Page</button>-->
    			  </div>
    			  <div id="extrainsertmenu">
              <!-- some test-data:
              <button>- </button><button>+ </button><button>* </button><hr><button>1. </button><button>1.) </button><button>1) </button><button>a) </button><button>I) </button>
              end test-data-->
    			  </div>
          </div>
        </div>
      </div>
      <div id="playbuttonarea">
        <button class="fluidbutton" id="presentationoptionsbutton" alt="slide design" title="slide design">
          <img class="nightmode-hidden portrait-hidden" src="images/buttons/advanced-options.svg">
          <img class="nightmode-only portrait-hidden" src="images/buttons/advanced-options_dark.svg">
          <img class="nightmode-hidden portrait-only" src="images/buttons/mob_advanced-option.svg">
          <img class="nightmode-only portrait-only" src="images/buttons/mob_advanced-option_dark.svg">
        </button>
        <button class="fluidbutton" id="playbutton" onclick="slidenote.presentation.showpresentation()" alt="start presentation" title="start presentation">
          <img class="nightmode-hidden portrait-hidden" src="images/buttons/playbutton.svg">
          <img class="nightmode-only portrait-hidden" src="images/buttons/playbutton_dark.svg">
          <img class="nightmode-hidden portrait-only" src="images/buttons/mob_playbutton.svg">
          <img class="nightmode-only portrait-only" src="images/buttons/mob_playbutton_dark.svg">
          <!--
          insert svg here
          -->
        </button>
      </div>
      <!-- the menus:-->
      <div id="menucloud">
        <div class="arrow_box">
          <div>cloud status:<span id="cloudstatus"></span></div>
          <button id="savebutton">save to cloud now</button>
          <button id="addrevision" onclick='dialoger.buildDialog({type:"alert",title:"sorry, not implemented yet",content:"revisions are coming soon! we are working hard to get them ready for you."})'>add revision</button>
          <!-- template for revisionlist -->
          <!-- not implemented yet
          <div class="separator">revert to revision</div>
          <ul id="revisionlist">
            <li><button>mon 06-11-19 11:49</button></li>
            <li><button>mon 06-11-19 11:49</button></li>
            <li><button>mon 06-11-19 11:49</button></li>
          </ul>
        -->
        </div>
      </div>
      <div id="menuload">
        <div class="arrow_box">
          <button id="newnote" class="menuitem" onclick="slidenoteguardian.createNewSlidenote()"><img src="images/buttons/plus.svg"><span>new slidenote</span></button>
          <div id="actnotearea">
            <div id="actnotetitle">new note</div>
            <button id="deletebutton" class="minibutton menuitem"><img src="images/buttons/minus.svg" alt="delete slidenote">delete</button>
            <button id="renamebutton" class="minibutton menuitem">rename</button>
            <button id="changepasswordbutton" class="minibutton menuitem">change password</button>
          </div>
          <ul id="notelist">
            <li><a class="menuitem loadnotebutton">new note</a></li>
            <li><a class="loadnotebutton menuitem">dinosaurs today</a></li>
            <li><a class="loadnotebutton menuitem">reading literature in the last century</a></li>
          </ul>
        </div>
      </div>
      <div id="menuoutlet"></div>
      <div id="menupublish"><div class="arrow_box"><div class="arrow_box_content">
        <button id="publishtocms" onclick="slidenoteguardian.exportPresentationToCMS()">publish presentation</button>
        <div class="separator">your published presentations</div>
        <ul id="publishedlist">
          <!-- some test-data to see structure: -->
          <li>
            <a href class="menuitem loadnotebutton"><div>first slidenote</div><div>25/08/2020 - 10:17</div><div>no comments so far</div></a>
            <button class="menuitem circle"><img src="images/buttons/minus.svg" alt="delete presentation >>>first slidenote"><div>delete</div></button>
            <button class="menuitem copylink"><img src="images/buttons/publish.svg" alt="copy link of presentation >>>first slidenote"><div>copy link</div></button>
          </li>
          <li>
            <button class="loadnotebutton">mon 06-11-19 11:00</button>
            <button class="circle"><img src="images/buttons/minus.svg" alt="delete presentation">delete</button>
            <button class="copylink"><img src="images/buttons/publish.svg" alt="copy link of presentation...">copy link</button>
          </li>
        </ul>
      </div></div></div>
      <div id="menuimportexport"><div class="arrow_box"><div class="arrow_box_content">
        <button id="importbutton" title="import slidenote or MD-file">
          <img src="images/buttons/bigmode_upload-text.svg">
          <span>import .slidenote, .csv or .md file</span>
          <input type="file" id="importfile" accept=".slidenote,.txt,.md,.csv">
        </button>
        <div class="separator">download slidenote as</div>
        <button id="exportasslidenotebutton" onclick="slidenoteguardian.saveNote('filesystem')" title="download as encrypted .slidenote file">
          <img src="images/buttons/bigmode_download-encrypted.svg">
          <span class="screenreader-only">download slidenote as</span>
          <span>encrypted .slidenote file</span>
        </button>
        <button id="exportasmdfilebutton" onclick="slidenoteguardian.exportToFilesystemRaw(slidenote.textarea.value, slidenoteguardian.notetitle+'.md')" title="download as unencrypted text file">
          <img src="images/buttons/bigmode_download-unencrypted.svg">
          <span class="screenreader-only">download code as</span>
          <span>unencrypted .md file</span>
        </button>
        <div class="separator">download presentation as</div>
        <button id="exportasenchtmlbutton" onclick="slidenoteguardian.exportPresentationLocal(true);" title="download presentation as encrypted .html file">
          <img src="images/buttons/bigmode_download-presentation-unencrypted.svg">
          <span class="screenreader-only">download presentation as</span>
          <span>encrypted .html file</span>
        </button>
        <button id="exportasunenchtmlbutton" onclick="slidenoteguardian.exportPresentationLocal(false);" title="download presentation as unencrypted .html file">
          <img src="images/buttons/bigmode_download-presentation.svg">
          <span class="screenreader-only">download presentation as</span>
          <span>unencrypted .html file</span>
        </button>
      </div></div></div>
      <div id="menuoptionseditor"><div class="arrow_box"><div class="arrow_box_content">
        <a href="/user/account.html" class="menuitem"><img src="images/buttons/bigmode_account.svg"><span>Account</span></a>
        <a href='/user/' onclick='document.cookie = "authtoken=; expires=0; path=/";'class="menuitem"><img src="images/buttons/bigmode_logout.svg"><span>log out</span></a>
        <div class="separator"><span>night shift</span></div>
        <button id="nightmodetoggle" class="menuitem">
          <div><img class="big-mode-only" src="images/buttons/darkmode.svg"><span class="big-mode-hidden">on</span></div>
          <div><img class="big-mode-only" src="images/buttons/dark_lightmode.svg"><span class="big-mode-hidden">off</span></div>
        </button>
        <div class="separator">view mode</div>
        <div id="optionmenuinterfacedesign">
          <!--<button id="editorchoicebutton" class="menuitem">-->
    			<select id="editorchoice" class="menuitem"  onchange="slidenote.choseEditor(this.value)">
    				<option value="md-texteditor" selected>context-mode (default)</option>
    				<option value="focus">focus-mode</option>
    				<option value="raw-text">raw text</option>
            <option value="big-mode">big mode</option>
            <option value="basic-mode">basic mode</option>
            <option value="audio-mode">audio mode</option>

    			</select>
          <!--</button>-->
		    </div>
        <div class="separator">---</div>
        <button class="menuitem" onclick="slidenote.extensions.showAdvancedMenu()"><img src="images/buttons/bigmode_options.svg"><span class="screenreader-only">Open </span><span>Advanced Options</span></button>
        <div class="separator">slidenotes.io service</div>
        <ul>
  				<li><a href="?tutorial=welcome" class="menuitem">tutorials</a></li>
          <li><button class="menuitem" onclick="slidenoteguardian.openFeedback()">feedback</button></li>
          <li><button class="menuitem" onclick="slidenote.showLicensesDialog()">licenses</button></li>
          <li><a href="https://slidenotes.io/privacy-notice.html" target="_blank" class="menuitem">privacy notice</a></li>
          <li><a href="https://slidenotes.io/terms-of-service.html" target="_blank" class="menuitem">terms of service</a></li>
  				<!--<li><a href="#" class="menuitem">documentation</a></li>
  				<li><a href="#" class="menuitem">community</a></li>-->
        </ul>
      </div></div></div>
      <div id="menusearchbox" class="autohideright"><div class="arrow_box"><div class="arrow_box_content">
        <!--<div class="separator">Search</div>-->
        <div class="separator">
          <select class="menuitem" name="searchinputchoice" id="searchinputchoice">
            <option value="normal" selected title="normal search. You can use '\n' for line-break">Normal Search</option>
            <option value="regex" title="Use a Regular Expression like /myRegex/flags . Allowed Flags are: i,m">RegEx Search </option>
            <option value="raw" title="Search for Text 'as it is'">Raw-Text Search</option>
          </select>
        </div>
        <input type="text" name="find" id="findinput" class="menuitem focusitem">
        <div class="buttonarea">
          <button id="findbutton" class="menuitem">Find</button>
        </div>
        <div class="separator">Replace</div>
        <input type="text" name="replace" id="replaceinput" class="menuitem">
        <div class="buttonarea">
          <button id="replacebutton" class="menuitem">replace</button>
          <button id="replaceallbutton" class="menuitem">replace all</button>
        </div>
        <div id="searchresult"></div>
      </div></div></div>

      <div id="frame-left"><div class="shadow-element"></div><div class="frame-top-element"></div></div>
      <div id="shadoweltop"></div>
      <div id="shadowelbottom" class="portrait-only"></div>
      <div id="frame-right"><div class="shadow-element"></div><div class="frame-top-element"></div></div>
      <div id="slidenoteloadingscreenwrapper">
        <div id="slidenoteeditorloadingscreen">
          <div id="slidenoteeditorloadingscreenbackground"></div>
          <div id="slidenoteeditorhidetexteditor"></div>
          <div id="circle-loading-animation-big"></div>
          <div id="initialLoadingProgress"></div>
        </div>
      </div>

    </div><!--end of slidenoteeditor-div-->
  	<div id="praesentationrahmen">
      <div id="previewselector">
        <h1>how does my presentation look like on...</h1>
        <span id="previewdimension">1920x1080px</span>
        <select id="previewselection" onclick="presentation.setPreviewStyle(this.value)">
          <option value="fullhd">wide screen monitors (fullHD)</option>
          <option value="widescreen">wide screen monitors (HD)</option>
          <option value="beamer">old beamer</option>
          <option value="ipad">iPad</option>
          <option value="iphone">iPhoneX</option>
          <option value="galaxy">Galaxy S9</option>
        </select>
      </div>
  		<div id="praesentation" lang="en"></div>
  		<div id="controlarea">
          <!-- presentation-interface -->
          <!-- ====================== -->

          <!-- horizontal interface -->
          <!-- -------------------- -->

          <!-- interface close -->
          <svg id="controlarea_close" viewBox="0 0 328 58">

            <!-- blob in -->
            <path d="M276.207,7.181c-7.735,2.324 -10.836,5.393 -10.686,12.849c0.168,8.379 9.677,15.253 18.084,13.723c8.407,-1.531 10.676,-7.431 9.175,-15.677c-1.501,-8.246 -8.389,-13.353 -16.573,-10.895Z" style="fill:url(#_Radial1);">
              <animate class="animateToClose" id="animate-to-close_blob1" begin="indefinite" dur="0.2s" attributeName="d"
                values="
                M276.207,7.181c-7.735,2.324 -10.836,5.393 -10.686,12.849c0.168,8.379 9.677,15.253 18.084,13.723c8.407,-1.531 10.676,-7.431 9.175,-15.677c-1.501,-8.246 -8.389,-13.353 -16.573,-10.895Z;

                M15.49,32.081c-7.708,-0.305 -12.404,0.058 -19.537,2.234c-10.649,3.249 -11.326,3.941 1.678,0.814c6.568,-1.58 10.982,-1.09 17.703,-1.68c4.814,-0.423 5.392,-1.161 0.156,-1.368Z;

                M15.49,32.081c-7.708,-0.305 -12.404,0.058 -19.537,2.234c-10.649,3.249 -11.326,3.941 1.678,0.814c6.568,-1.58 10.982,-1.09 17.703,-1.68c4.814,-0.423 5.392,-1.161 0.156,-1.368Z;"

                fill="freeze"
                calcMode="spline"
                keySplines="0.9 0.03 0.93 0.53; 0.79 0.09 0.16 0.73">
              </animate>
            </path>

            <!-- main -->
            <path d="M120.982,20.035c67.135,0 100.596,-23.723 161.8,23.949c17.027,13.262 27.856,11.43 45.064,14.04l-327.846,0l0,-34.31c18.38,-20.989 90.749,-3.679 120.982,-3.679Z" fill-rule="nonzero" style="fill:#1E1E1E; cursor: pointer;" filter="url(#presentation-interface_glow)">
              <animate class="animateToClose" id="animate-to-close" begin="indefinite" dur="0.4s" attributeName="d"
                values="
                M120.982,20.035c67.135,0 100.596,-23.723 161.8,23.949c17.027,13.262 27.856,11.43 45.064,14.04l-327.846,0l0,-34.31c18.38,-20.989 90.749,-3.679 120.982,-3.679Z;

                M24.34,11.438c12.485,5.274 15.458,13.78 14.946,29.369c-0.221,6.757 -1.714,13.066 -6.827,17.217l-32.459,0l0,-53.064c9.116,2.823 17.699,3.672 24.34,6.478Z;

                M28.784,4.983c15.258,3.236 32.522,11.306 31.712,35.973c-0.222,6.757 -1.714,12.397 -4.242,17.068l-56.254,0l0,-58.024c9.116,2.823 21.731,3.487 28.784,4.983Z;"

                fill="freeze"
                calcMode="spline"
                keySplines="0.9 0.03 0.93 0.53; 0.79 0.09 0.16 0.73">
              </animate>
              <animate class="animateToClose" id="animate-to-close_color" begin="indefinite" dur="0.4s" fill="freeze" attributeName="fill" to="#BEBEBE">
              </animate>
            </path>

            <!-- shine -->
            <path d="M27.356,7.673c8.268,2.003 14.639,5.508 12.618,9.193c-2.211,4.032 -9.559,3.806 -17.827,1.802c-8.267,-2.003 -15.287,-4.731 -14.204,-9.2c1.083,-4.468 11.146,-3.799 19.413,-1.795Z" style="fill:#fff;fill-opacity:0.16; pointer-events: none;">
              <animate class="animateToClose" id="animate-to-close_shine1" begin="indefinite" dur="0.4s" attributeName="d"
                values="
                M231.94,21.437c8.267,2.003 14.638,5.508 12.617,9.194c-2.21,4.031 -9.559,3.805 -17.826,1.802c-8.267,-2.004 -15.287,-4.732 -14.204,-9.2c1.082,-4.469 11.146,-3.799 19.413,-1.796Z;

                M27.498,15.127c7.123,4.651 8.623,9.062 5.487,11.86c-3.431,3.061 -3.251,-0.281 -10.373,-4.932c-7.123,-4.651 -8.529,-5.497 -7.229,-7.489c1.301,-1.992 4.992,-4.091 12.115,0.561Z;

                M27.356,7.673c8.268,2.003 14.639,5.508 12.618,9.193c-2.211,4.032 -9.559,3.806 -17.827,1.802c-8.267,-2.003 -15.287,-4.731 -14.204,-9.2c1.083,-4.468 11.146,-3.799 19.413,-1.795Z;"

                fill="freeze"
                calcMode="spline"
                keySplines="0.9 0.03 0.93 0.53; 0.79 0.09 0.16 0.73">
              </animate>
            </path>

            <path d="M259.491,34.269c2.022,1.39 3.529,4.566 1.825,6.952c-1.705,2.386 -4.536,1.448 -6.642,0.019c-3.893,-2.643 -3.164,-4.725 -2.227,-6.125c1.63,-2.437 4.529,-2.575 7.044,-0.846Z" style="fill:#fff;fill-opacity:0.24; pointer-events: none;">
              <animate class="animateToClose" id="animate-to-close_shine2" begin="indefinite" dur="0.4s" attributeName="d"
                values="
                M259.491,34.269c2.022,1.39 3.529,4.566 1.825,6.952c-1.705,2.386 -4.536,1.448 -6.642,0.019c-3.893,-2.643 -3.164,-4.725 -2.227,-6.125c1.63,-2.437 4.529,-2.575 7.044,-0.846Z;

                M37.47,33.14c0.36,1.373 -0.327,3.366 -2.219,3.821c-1.893,0.455 -2.848,-1.01 -3.231,-2.432c-0.709,-2.627 0.575,-3.303 1.654,-3.593c1.88,-0.506 3.348,0.496 3.796,2.204Z;

                M54.314,22.478c1.565,1.891 2.146,5.358 -0.147,7.186c-2.292,1.829 -4.758,0.152 -6.393,-1.799c-3.021,-3.607 -1.75,-5.41 -0.466,-6.5c2.235,-1.899 5.06,-1.238 7.006,1.113Z;"

                fill="freeze"
                calcMode="spline"
                keySplines="0.9 0.03 0.93 0.53; 0.79 0.09 0.16 0.73">
              </animate>
            </path>
          </svg>

          <!-- interface open -->
          <svg id="controlarea_open" viewBox="0 0 328 58">

            <!-- blob out -->
            <path d="M5.215,53.811c-8.07,-0.32 -12.504,4.93 -6.926,9.88c5.583,4.955 14.703,11.637 19.271,11.999c8.519,0.674 9.376,-5.314 5.161,-12.558c-3.282,-5.642 -10.745,-9.053 -17.506,-9.321Z" style="fill:url(#_Radial1); cursor: pointer;" filter="url(#presentation-interface_glow)">
              <animate class="animateToOpen" id="animate-to-open_blob1" begin="0s" dur="0.42s" attributeName="d"
                values="
                M5.215,53.811c-8.07,-0.32 -12.504,4.93 -6.926,9.88c5.583,4.955 14.703,11.637 19.271,11.999c8.519,0.674 9.376,-5.314 5.161,-12.558c-3.282,-5.642 -10.745,-9.053 -17.506,-9.321Z;

                M269.869,9.776c-12.938,3.491 -13.37,14.602 0.202,14.397c6.109,-0.092 14.428,1.541 18.574,3.494c11.382,5.362 13.123,-5.265 3.207,-13.727c-4.965,-4.237 -15.317,-5.963 -21.983,-4.164Z;

                M276.207,7.181c-7.735,2.324 -10.836,5.393 -10.686,12.849c0.168,8.379 9.677,15.253 18.084,13.723c8.407,-1.531 10.676,-7.431 9.175,-15.677c-1.501,-8.246 -8.389,-13.353 -16.573,-10.895Z;"

                fill="freeze"
                calcMode="spline"
                keySplines="0.9 0.03 0.93 0.53; 0.79 0.09 0.16 0.73">
              </animate>
            </path>

            <path d="M287.252,11.774c1.754,2.12 2.405,6.007 -0.165,8.057c-2.571,2.051 -5.335,0.171 -7.168,-2.017c-3.387,-4.044 -1.962,-6.066 -0.523,-7.288c2.506,-2.129 5.674,-1.388 7.856,1.248Z" style="fill:#fff;fill-opacity:0.08;pointer-events: none;">
              <animate class="animateToOpen" id="animate-to-open_blob1-shine" begin="0s" dur="0.42s" attributeName="d"
                values="
                M12.049,58.232c2.583,0.948 9.326,5.269 8.138,8.335c-1.188,3.066 -7.423,-2.295 -10.107,-3.262c-4.964,-1.788 -11.622,-2.021 -10.994,-3.802c1.092,-3.101 9.75,-2.45 12.963,-1.271Z;

                M285.729,11.992c2.583,0.947 9.326,5.269 8.138,8.335c-1.188,3.066 -7.422,-2.295 -10.107,-3.262c-4.963,-1.788 -11.622,-2.021 -10.994,-3.803c1.093,-3.1 9.75,-2.449 12.963,-1.27Z;

                M287.252,11.774c1.754,2.12 2.405,6.007 -0.165,8.057c-2.571,2.051 -5.335,0.171 -7.168,-2.017c-3.387,-4.044 -1.962,-6.066 -0.523,-7.288c2.506,-2.129 5.674,-1.388 7.856,1.248Z;"

                fill="freeze"
                calcMode="spline"
                keySplines="0.9 0.03 0.93 0.53; 0.79 0.09 0.16 0.73">
              </animate>
            </path>


            <!-- main -->
            <path d="M28.784,4.983c15.258,3.236 32.522,11.306 31.712,35.973c-0.222,6.757 -1.714,12.397 -4.242,17.068l-56.254,0l0,-58.024c9.116,2.823 21.731,3.487 28.784,4.983Z" fill-rule="nonzero" style="fill:#BEBEBE;" filter="url(#presentation-interface_glow)">
              <animate class="animateToOpen" id="animate-to-open" begin="0s" dur="0.4s" attributeName="d"
                values="
                M28.784,4.983c15.258,3.236 32.522,11.306 31.712,35.973c-0.222,6.757 -1.714,12.397 -4.242,17.068l-56.254,0l0,-58.024c9.116,2.823 21.731,3.487 28.784,4.983Z;

                M155.718,35.328c63.276,-22.434 114.049,-36.858 149.453,-13.52c14.686,9.68 17.082,19.54 22.675,36.216l-327.846,0l0,-19.802c37.412,-10.233 127.52,7.103 155.718,-2.894Z;

                M120.982,20.035c67.135,0 100.596,-23.723 161.8,23.949c17.027,13.262 27.856,11.43 45.064,14.04l-327.846,0l0,-34.31c18.38,-20.989 90.749,-3.679 120.982,-3.679Z;"

                fill="freeze"
                calcMode="spline"
                keySplines="0.9 0.03 0.93 0.53; 0.79 0.09 0.16 0.73">
              </animate>
              <animate class="animateToOpen" id="animate-to-open_color" begin="0s" dur="0.4s" fill="freeze" attributeName="fill" to="#1E1E1E">
              </animate>
            </path>

            <!-- shine -->
            <path d="M27.356,7.673c8.268,2.003 14.639,5.508 12.618,9.193c-2.211,4.032 -9.559,3.806 -17.827,1.802c-8.267,-2.003 -15.287,-4.731 -14.204,-9.2c1.083,-4.468 11.146,-3.799 19.413,-1.795Z" style="fill:#fff;fill-opacity:0.16;">
              <animate class="animateToOpen" id="animate-to-open_shine1" begin="0s" dur="0.4s" attributeName="d"
                values="
                M27.356,7.673c8.268,2.003 14.639,5.508 12.618,9.193c-2.211,4.032 -9.559,3.806 -17.827,1.802c-8.267,-2.003 -15.287,-4.731 -14.204,-9.2c1.083,-4.468 11.146,-3.799 19.413,-1.795Z;

                M287.785,16.257c7.878,3.209 9.219,6.262 6.674,9.607c-2.785,3.658 -7.736,-0.087 -12.386,-2.207c-7.74,-3.528 -11.95,-3.162 -10.216,-7.42c1.735,-4.258 8.05,-3.189 15.928,0.02Z;

                M231.94,21.437c8.267,2.003 14.638,5.508 12.617,9.194c-2.21,4.031 -9.559,3.805 -17.826,1.802c-8.267,-2.004 -15.287,-4.732 -14.204,-9.2c1.082,-4.469 11.146,-3.799 19.413,-1.796Z;"

                fill="freeze"
                calcMode="spline"
                keySplines="0.9 0.03 0.93 0.53; 0.79 0.09 0.16 0.73">
              </animate>
            </path>

            <path d="M54.314,22.478c1.565,1.891 2.146,5.358 -0.147,7.186c-2.292,1.829 -4.758,0.152 -6.393,-1.799c-3.021,-3.607 -1.75,-5.41 -0.466,-6.5c2.235,-1.899 5.06,-1.238 7.006,1.113Z" style="fill:#fff;fill-opacity:0.24;">
              <animate class="animateToOpen" id="animate-to-open_shine2" begin="0s" dur="0.4s" attributeName="d"
                values="
                M54.314,22.478c1.565,1.891 2.146,5.358 -0.147,7.186c-2.292,1.829 -4.758,0.152 -6.393,-1.799c-3.021,-3.607 -1.75,-5.41 -0.466,-6.5c2.235,-1.899 5.06,-1.238 7.006,1.113Z;

                M308.038,28.68c1.922,1.525 3.209,4.796 1.346,7.06c-1.864,2.265 -4.53,-1.122 -6.534,-2.691c-3.704,-2.902 -3.33,-4.518 -2.3,-5.851c1.792,-2.32 5.096,-0.415 7.488,1.482Z;

                M259.491,34.269c2.022,1.39 3.529,4.566 1.825,6.952c-1.705,2.386 -4.536,1.448 -6.642,0.019c-3.893,-2.643 -3.164,-4.725 -2.227,-6.125c1.63,-2.437 4.529,-2.575 7.044,-0.846Z;"

                fill="freeze"
                calcMode="spline"
                keySplines="0.9 0.03 0.93 0.53; 0.79 0.09 0.16 0.73">
              </animate>
            </path>

            <defs>
              <filter id="presentation-interface_glow">
                <feGaussianBlur in="SourceAlpha" stdDeviation="1"/>
                <feOffset dx="0" dy="0" result="offsetblur"/>
                <feFlood flood-color="rgb(0,0,0)" flood-opacity="0.8"/>
                <feComposite in2="offsetblur" operator="in"/>
                <feMerge>
                  <feMergeNode/>
                  <feMergeNode in="SourceGraphic"/>
                </feMerge>
              </filter>

              <radialGradient id="_Radial1" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse" gradientTransform="matrix(17.1133,-17.3818,17.3818,17.1133,291.869,26.8478)">
                <stop offset="0" style="stop-color:#020000;stop-opacity:1"/>
                <stop offset="1" style="stop-color:#727272;stop-opacity:1"/>
              </radialGradient>
            </defs>
          </svg>

          <!-- vertical blobs -->
          <!-- -------------- -->

          <!-- vertical blobs close -->
          <svg id="controlarea-vertical_close" viewBox="0 0 47 158" style="background-color: none">
            <path d="M25.565,59.105c-10.826,1.215 -17.61,6.435 -19.213,16.365c-1.801,11.162 8.383,20.326 19.909,20.326c11.527,0 18.666,-6.923 18.666,-18.229c0,-11.305 -7.907,-19.747 -19.362,-18.462Z" style="fill:url(#_gradient-vertical-blob1);">
              <animate class="animateToClose" id="animate-to-close_vertical-blob1" begin="0.5s" dur="0.2s" attributeName="d"
                values="
                M25.565,59.105c-10.826,1.215 -17.61,6.435 -19.213,16.365c-1.801,11.162 8.383,20.326 19.909,20.326c11.527,0 18.666,-6.923 18.666,-18.229c0,-11.305 -7.907,-19.747 -19.362,-18.462Z;

                M17.377,79.614c-4.572,-1.413 -10.636,1.439 -11.131,4.07c-0.871,4.639 3.347,7.947 7.45,7.984c4.104,0.037 8.365,-1.746 8.263,-4.881c-0.07,-2.144 -0.799,-6.003 -4.582,-7.173Z;

                M14.875,77.627c-5.329,-1.117 -8.802,0.332 -9.603,5.296c-0.901,5.578 4.19,10.159 9.951,10.159c5.762,0 9.33,-0.576 9.33,-6.227c0,-5.651 -5.265,-8.304 -9.678,-9.228Z;"

                fill="freeze"
                calcMode="spline"
                keySplines="0.9 0.03 0.93 0.53; 0.79 0.09 0.16 0.73">
              </animate>
            </path>

            <defs>
              <linearGradient id="_gradient-vertical-blob1" x1="0" y1="0" x2="1" y2="0" gradientUnits="userSpaceOnUse" gradientTransform="matrix(48.2231,-41.9077,41.9077,48.2231,6.14419,95.7957)">
                <stop offset="0" style="stop-color:#606060;stop-opacity:1"/>
                <stop offset="1" style="stop-color:#fff;stop-opacity:0"/>
              </linearGradient>
            </defs>

            <path d="M25.565,2.612c-10.826,1.215 -17.61,6.434 -19.213,16.365c-1.801,11.161 8.383,20.325 19.909,20.325c11.527,0 18.666,-6.923 18.666,-18.228c0,-11.305 -7.907,-19.748 -19.362,-18.462Z" style="fill:url(#_gradient-vertical-blob2);">
              <animate class="animateToClose" id="animate-to-close_vertical-blob2" begin="0.5s" dur="0.2s" attributeName="d"
                values="
              M25.565,2.612c-10.826,1.215 -17.61,6.434 -19.213,16.365c-1.801,11.161 8.383,20.325 19.909,20.325c11.527,0 18.666,-6.923 18.666,-18.228c0,-11.305 -7.907,-19.748 -19.362,-18.462Z;

              M15.016,52.635c-2.908,-0.777 -6.969,0.527 -7.26,4.129c-0.421,5.21 0.869,6.185 7.225,6.347c6.355,0.162 7.752,-2.056 7.751,-4.873c0,-2.891 -1.239,-3.873 -7.716,-5.603Z;

              M14.875,46.807c-4.78,-2.608 -8.802,3.216 -9.603,8.18c-0.901,5.578 4.19,10.159 9.951,10.159c5.762,0 8.369,-1.538 8.369,-7.189c0,-5.65 -2.965,-8.014 -8.717,-11.15Z;"

              fill="freeze"
              calcMode="spline"
              keySplines="0.9 0.03 0.93 0.53; 0.79 0.09 0.16 0.73">
              </animate>
            </path>

            <defs>
              <linearGradient id="_gradient-vertical-blob2" x1="0" y1="0" x2="1" y2="0" gradientUnits="userSpaceOnUse" gradientTransform="matrix(48.2231,-41.9077,41.9077,48.2231,6.14419,39.3024)">
                <stop offset="0" style="stop-color:#d0d0d0;stop-opacity:1"/>
                <stop offset="1" style="stop-color:#fff;stop-opacity:0"/>
              </linearGradient>
            </defs>
          </svg>

          <!-- vertical blobs open -->
          <svg id="controlarea-vertical_open" viewBox="0 0 47 158">
            <path d="M14.875,77.627c-5.329,-1.117 -8.802,0.332 -9.603,5.296c-0.901,5.578 4.19,10.159 9.951,10.159c5.762,0 9.33,-0.576 9.33,-6.227c0,-5.651 -5.265,-8.304 -9.678,-9.228Z" style="fill:url(#_gradient-vertical-blob1);">
              <animate class="animateToOpen" id="animate-to-open_vertical-blob1" begin="0" dur="0.2s" attributeName="d"
                values="
                M14.875,77.627c-5.329,-1.117 -8.802,0.332 -9.603,5.296c-0.901,5.578 4.19,10.159 9.951,10.159c5.762,0 9.33,-0.576 9.33,-6.227c0,-5.651 -5.265,-8.304 -9.678,-9.228Z;

                M22.488,56.41c-11.687,1.312 -17.729,7.789 -19.46,18.509c-1.944,12.049 14.227,23.529 26.669,23.529c12.444,0 16.772,-8.662 16.772,-20.867c0,-12.204 -11.616,-22.558 -23.981,-21.171Z;

                M25.565,59.105c-10.826,1.215 -17.61,6.435 -19.213,16.365c-1.801,11.162 8.383,20.326 19.909,20.326c11.527,0 18.666,-6.923 18.666,-18.229c0,-11.305 -7.907,-19.747 -19.362,-18.462Z;"

                fill="freeze"
                calcMode="spline"
                keySplines="0.9 0.03 0.93 0.53; 0.79 0.09 0.16 0.73">
              </animate>
            </path>

            <defs>
              <linearGradient id="_gradient-vertical-blob1" x1="0" y1="0" x2="1" y2="0" gradientUnits="userSpaceOnUse" gradientTransform="matrix(48.2231,-41.9077,41.9077,48.2231,6.14419,95.7957)">
                <stop offset="0" style="stop-color:#606060;stop-opacity:1"/>
                <stop offset="1" style="stop-color:#fff;stop-opacity:0"/>
              </linearGradient>
            </defs>

            <path id="vertical-blob2" d="M14.875,46.807c-4.78,-2.608 -8.802,3.216 -9.603,8.18c-0.901,5.578 4.19,10.159 9.951,10.159c5.762,0 8.369,-1.538 8.369,-7.189c0,-5.65 -2.965,-8.014 -8.717,-11.15Z" style="fill:url(#_gradient-vertical-blob2);">
              <animate class="animateToOpen" id="animate-to-open_vertical-blob2" begin="0" dur="0.2s" attributeName="d"
                values="
                M14.875,46.807c-4.78,-2.608 -8.802,3.216 -9.603,8.18c-0.901,5.578 4.19,10.159 9.951,10.159c5.762,0 8.369,-1.538 8.369,-7.189c0,-5.65 -2.965,-8.014 -8.717,-11.15Z;

                M27.767,1.336c-10.826,1.215 -22.866,9.246 -24.469,19.177c-1.801,11.161 14.176,23.121 25.702,23.121c11.527,0 17.128,-11.207 17.128,-22.512c0,-11.305 -6.906,-21.072 -18.361,-19.786Z;

                M25.565,2.612c-10.826,1.215 -17.61,6.434 -19.213,16.365c-1.801,11.161 8.383,20.325 19.909,20.325c11.527,0 18.666,-6.923 18.666,-18.228c0,-11.305 -7.907,-19.748 -19.362,-18.462Z;"

                fill="freeze"
                calcMode="spline"
                keySplines="0.9 0.03 0.93 0.53; 0.79 0.09 0.16 0.73">
              </animate>
            </path>

            <defs>
              <linearGradient id="_gradient-vertical-blob2" x1="0" y1="0" x2="1" y2="0" gradientUnits="userSpaceOnUse" gradientTransform="matrix(48.2231,-41.9077,41.9077,48.2231,6.14419,39.3024)">
                <stop offset="0" style="stop-color:#d0d0d0;stop-opacity:1"/>
                <stop offset="1" style="stop-color:#fff;stop-opacity:0"/>
              </linearGradient>
            </defs>
          </svg>

          <!-- interface interaction -->
          <!-- --------------------- -->

          <!-- open-menu -->
          <button id="controlarea_open-menu" class="controlbutton controlbuttonbubble" onclick="slidenote.presentation.animatePresentationControl(true)" title="show controlarea">
            <span class="screenreader-only">show controlarea</span>
            <div id="controlarea_open-menu_rect1"></div>
            <div id="controlarea_open-menu_rect2"></div>
            <!-- <img src="images/buttons/ctrlbuttonbubble.png"> -->
          </button>
          <!-- back-in -->
          <button id="controlarea_back-in" class="controlbutton controlbuttonbottomhidearea" onclick="slidenote.presentation.animatePresentationControl(false)" title="hide controlarea">
            <span class="screenreader-only">hide controlarea</span>
            <img src="images/buttons/ctrlbuttonhidearea.png">
          </button>
          <!-- first-slide -->
          <button id="controlarea_first-slide" class="controlbutton controlbuttonbottomfirst" onclick="presentation.showPage(0)" title="first page">
            <span class="screenreader-only">first page</span>
            <img src="images/buttons/ctrlbuttonfirst.png">
          </button>
          <!-- previous-slide -->
          <button id="controlarea_previous-slide" class="controlbutton" onclick="presentation.lastPage()" title="page before">
            <span class="screenreader-only">page before</span>
            <img src="images/buttons/ctrlbuttonbefore.png">
          </button>
          <!-- next-slide -->
          <button id="controlarea_next-slide" class="controlbutton controlbuttonbottomnext" onclick="presentation.nextPage()" title="next page">
            <span class="screenreader-only">next page</span>
            <img src="images/buttons/ctrlbuttonnext.png">
          </button>
          <!-- last slide -->
          <button id="controlarea_last-slide" class="controlbutton" onclick="presentation.showPage(presentation.pages.length-1)" title="last page">
            <span class="screenreader-only">last page</span>
            <img src="images/buttons/ctrlbuttonlast.png">
          </button>

          <!-- additional interaction -->
          <!-- ---------------------- -->

          <!-- preview-screen -->
          <button id="controlarea_preview-screen" class="controlbutton controlbuttonleft" onclick="presentation.enterPreviewMode();" title="enter preview mode">
            <span class="screenreader-only">enter preview mode</span>
            <img src="images/buttons/ctrlbuttonpreview.png">
          </button>
          <!-- back-to-editor -->
          <button id="controlarea_back-to-editor" class="controlbutton controlbuttonleft" onclick="presentation.showpresentation()" title="hide presentation">
            <span class="screenreader-only">hide presentation</span>
            <img src="images/buttons/ctrlbuttonclose.png">
          </button>
  		</div>
  	</div>

  	<div id="options">
  		<h1>Options<button id="optionsclose" onclick="slidenote.extensions.hideThemes()" value="close">close</button></h1>
  		<div class="tabbar">
  			<h2><a href="javascript:slidenote.extensions.optionsTab(0)">Design Options</a></h2>
  			<h2><a href="javascript:slidenote.extensions.optionsTab(1)">Global Options</a></h2>
  			<h2><a href="javascript:slidenote.extensions.optionsTab(2)">Extensions</a></h2>
  		</div>
  		<div id="designoptionstab" class="optiontab"></div>
  		<div id="globaloptionstab" class="optiontab"></div>
  		<div id="themeselectiontab" class="optiontab"></div>
  	</div>

    <div id="imagesblock" class="dialogboxparent">
      <div id="imagesuploadblock" class="dialog_box" style="display:none;">
        <h1>Image Upload <button onclick="Javascript:document.getElementById('imagesblock').classList.remove('visible');">close</button></h1>
        <div>
          Select an local image file to upload, then click on image to use it in this slidenote
        </div>
        <div id="imageResizeOptions">
          <input type="radio" name="imageResize" value="1024x768" onchange="slidenote.base64images.changeMaxSize(this.value)"><label>Background/Big (1024x768)</label>
          <input type="radio" name="imageResize" value="400x300" onchange="slidenote.base64images.changeMaxSize(this.value)"><label>Medium (400x300)</label>
          <input type="radio" name="imageResize" value="100x50" onchange="slidenote.base64images.changeMaxSize(this.value)"><label>Icon (100x50)</label>
        </div>
        <div id="filePreview"></div>
        <div id="fileOld"></div>
        <input type="file" id="fileInput">
      </div>
      <div id="imagesreuseblock" class="dialogbox">
        <h1 class="dialogtitle">
          <span>image gallery</span>
          <button class="dialogclosebutton" onclick="document.getElementById('imagesblock').classList.remove('visible');">close <img src="images/buttons/x.svg"></button>
        </h1>
        <div id="imageselectionlist" class="dialogboxcontent"></div>
        <div id="imageselectiondialogbuttons">
          <button id="imageselectionuploadbutton" class="plusbutton" title="add image to imagegallery" onclick="document.getElementById('fileInput').value='';slidenote.base64images.uploadmode='imageselection'; document.getElementById('fileInput').click();">
            <img src="images/buttons/plus.svg" alt="add image to gallery">
            <span>add image</span>
            <span class="screenreader-only">to gallery</span>
          </button>
          <span>or choose image from gallery</span>
        </div>
      </div>

    </div>

  </div><!-- end of slidenotediv-->
  <div id="slidenoteGuardianPasswordPromptStore">
    <div id="slidenoteGuardianPasswordPromptTemplate" class="initial dialogbox small">
    	<h1 class="dialogtitle">
        <span id="slidenoteGuardianPasswordPromptNotetitle">TITLE</span>
      <button class="dialogclosebutton" id="dialogclosebutton"><span>cancel</span><img src="images/buttons/x.svg"></button>
    </h1>
      <div class="dialogcontent">
      	<div id="slidenoteGuardianPasswordPromptTemplatePreText"></div>
      	<form onsubmit="event.preventDefault();" action="#" method="POST">
      		<label for="username" id="slidenoteGuardianPasswordPromptUsernameLabel">filename for export</label>
      		<input type="text" id="username">
      		<label for="password" id="slidenoteGuardianPasswordPromptPasswordLabel">password</label>
      		<input type="password" id="password">
      		<label for="pwcheckfield" id="slidenoteGuardianPasswordPromptRetypeLabel">re-type password</label>
      		<input type="password" id="pwcheckfield">
          <label for="slidenoteGuardianPasswordPromptCommentEnable" id="slidenoteGuardianPasswordPromptCommentEnableLabel">enable comments</label>
          <input type="checkbox" id="slidenoteGuardianPasswordPromptCommentEnable" checked="checked" onchange="slidenoteguardian.uploadRestObject.enableComments = this.checked">
          <div class="buttonarea">
        		<button type="submit" id="slidenoteGuardianPasswordPromptEncrypt">encrypt</button>
            <button id="skippassword" onclick="slidenoteguardian.skipPassword()">skip</button>
            <button id="passwordgen" onclick="slidenoteguardian.passwordGenerator()">generate a password for me</butt>
          </div>
      		<div id="slidenoteGuardianPasswortPromptAfterText">
            <!--we recommend using a password manager to keep up with the task of choosing and remembering safe passwords on the web.-->
            <button id="forgottenPasswordDialogButton" class="linkbutton" type="button" name="button" onclick="slidenoteguardian.encryptionHelpDialog()">
              read about forgotten passwords
            </button>
          </div>
      	</form>
      </div>
    </div>
  </div>
  <div id="slidenoteLoadingScreen">
  	<h1>Please wait while your presentation is generated...</h1>
  	<!--<img src="images/wait-charlie-chaplin.gif" height="80%">-->
    <svg class="loading-blob" id="loading-blob1" viewBox="0 0 100 100">
            <path d="M37.554,80.489c2.083-.017,21.2,10.486,39.876-17.363,6.662-9.931,4.772-23.982-2.23-31.908-7.628-8.634-21.694-11.453-31.4-6.106C20.036,38.21,24.457,54.56,23.024,56.588c-.961,1.359-13.326,6.287-6.491,19.617,5.777,11.266,19.1,4.3,21.021,4.284Z" fill-rule="nonzero"style="fill:url(#linear_blob1);">
              <animate dur="1s" repeatCount="indefinite" attributeName="d" values="M37.554,80.489c2.083-.017,21.2,10.486,39.876-17.363,6.662-9.931,4.772-23.982-2.23-31.908-7.628-8.634-21.694-11.453-31.4-6.106C20.036,38.21,24.457,54.56,23.024,56.588c-.961,1.359-13.326,6.287-6.491,19.617,5.777,11.266,19.1,4.3,21.021,4.284Z;
              M36.123,75.275c2.083-.017,18.641-.7,28.522-10.279,8-7.75,6.8-20.659,1.735-24.6-8.361-6.508-11.779,1.636-14.061,1.6-2.082-.032-10.173-7.92-18.1-8.778-13.468-1.456-26.6,15.808-19.056,31.894C20.862,77.269,34.2,75.29,36.123,75.275Z;
              M36.106,74.926c5.373,1.843 11.99,6.357 23.075,-0.937c9.303,-6.121 14.009,-15.475 12.608,-23.989c-1.72,-10.455 -8.037,-13.409 -13.286,-15.981c-4.157,-2.037 -12.503,-3.959 -21.335,-3.743c-13.542,0.331 -28.978,18.491 -22.007,34.833c4.121,9.663 16.193,8.187 20.945,9.817Z;
                M37.554,80.489c2.083-.017,21.2,10.486,39.876-17.363,6.662-9.931,4.772-23.982-2.23-31.908-7.628-8.634-21.694-11.453-31.4-6.106C20.036,38.21,24.457,54.56,23.024,56.588c-.961,1.359-13.326,6.287-6.491,19.617,5.777,11.266,19.1,4.3,21.021,4.284Z"
            fill="freeze"
          calcMode="spline"
          keySplines="0.55 0.17 0.2 1; 0.22 0.51 0.77 0.33; 0.58 0.27 0.2 1">

        </path>

        <path d="M66.403,56.051c1.244,-2.904 4.367,-3.477 7.047,-2.448c2.751,1.058 3.138,5.067 1.869,7.961c-1.437,3.278 -6.323,8.007 -9.754,6.074c-2.568,-1.447 -0.433,-8.621 0.838,-11.587Z" fill-rule="nonzero"style="fill:white; opacity: 0.2">
                <animate dur="1s" repeatCount="indefinite" attributeName="d" values="M66.403,56.051c1.244,-2.904 4.367,-3.477 7.047,-2.448c2.751,1.058 3.138,5.067 1.869,7.961c-1.437,3.278 -6.323,8.007 -9.754,6.074c-2.568,-1.447 -0.433,-8.621 0.838,-11.587Z;
                M58.265,56.88c1.244,-2.904 2.951,-7.435 5.631,-6.406c2.751,1.058 3.138,5.067 1.869,7.961c-1.437,3.278 -6.323,8.007 -9.754,6.074c-2.568,-1.447 0.983,-4.663 2.254,-7.629Z;
                M55.44,61.664c1.681,-2.675 5.798,-6.211 8.285,-4.777c2.553,1.473 2.31,5.495 0.606,8.155c-1.931,3.014 -5.311,6.985 -8.399,4.541c-2.311,-1.829 -2.21,-5.187 -0.492,-7.919Z;
                M66.403,56.051c1.244,-2.904 4.367,-3.477 7.047,-2.448c2.751,1.058 3.138,5.067 1.869,7.961c-1.437,3.278 -6.323,8.007 -9.754,6.074c-2.568,-1.447 -0.433,-8.621 0.838,-11.587Z;"
            fill="freeze"
            calcMode="spline"
            keySplines="0.55 0.17 0.2 1; 0.42 0.34 0.9 0.25; 0.58 0.27 0.2 1">
        </path>  -->

      <defs>
        <linearGradient id="linear_blob1" x1="0" y1="0" x2="1" y2="0" gradientUnits="userSpaceOnUse" gradientTransform="matrix(45.7569,-39.1744,39.1744,45.7569,19.4679,67.8736)">
          <stop offset="0" style="stop-color:rgb(205,123,103);stop-opacity:0.77"/>
          <stop offset="1" style="stop-color:rgb(114,195,211);stop-opacity:0.77"/>
      </defs>
    </svg>
    <svg class="loading-blob" id="loading-blob2" viewBox="0 0 100 100">
          <path d="M49.356,33.337c-5.373,-1.843 -11.991,-6.357 -23.075,0.937c-9.303,6.122 -10.68,19.01 -7.195,26.903c4.237,9.595 18.342,15.801 30.914,15.708c12.934,-0.096 22.639,-2.831 29.516,-11.926c5.423,-7.173 4.984,-19.165 -1.863,-26.447c-7.196,-7.653 -23.545,-3.545 -28.297,-5.175Z" fill-rule="nonzero"style="fill:url(#linear_blob2);">
            <animate dur="1s" repeatCount="indefinite" attributeName="d" values="M49.356,33.337c-5.373,-1.843 -11.991,-6.357 -23.075,0.937c-9.303,6.122 -10.68,19.01 -7.195,26.903c4.237,9.595 18.342,15.801 30.914,15.708c12.934,-0.096 22.639,-2.831 29.516,-11.926c5.423,-7.173 4.984,-19.165 -1.863,-26.447c-7.196,-7.653 -23.545,-3.545 -28.297,-5.175Z;

            M50.28,53.573c-16.471,-1.706 -28.493,-22.823 -39.577,-15.529c-9.303,6.121 -10.68,19.009 -7.195,26.903c4.237,9.595 33.92,12.031 46.492,11.938c12.934,-0.096 38.141,-3.242 45.017,-12.336c5.424,-7.173 4.706,-22.387 -8.391,-25.782c-13.765,-3.567 -21.78,16.314 -36.346,14.806Z;

            M50,20.711c-9.754,-0.721 -3.222,6.269 -14.307,13.563c-9.303,6.122 -10.679,19.01 -7.194,26.903c4.236,9.595 9.094,12.724 16.343,14.591c7.459,1.92 21.565,-1.168 28.146,-10.809c5.19,-7.603 4.34,-21.29 -3.742,-29.249c-7.485,-7.37 -10.055,-14.32 -19.246,-14.999Z;

              M50,36.47c-5.373,-1.843 -13.895,-9.49 -24.98,-2.196c-9.303,6.122 -10.679,19.01 -7.194,26.903c4.236,9.595 19.602,14.533 32.174,14.44c12.934,-0.096 25.47,-1.563 32.347,-10.658c5.424,-7.173 4.985,-19.165 -1.862,-26.447c-7.197,-7.653 -25.733,-0.412 -30.485,-2.042Z;

              M49.356,33.337c-5.373,-1.843 -11.991,-6.357 -23.075,0.937c-9.303,6.122 -10.68,19.01 -7.195,26.903c4.237,9.595 18.342,15.801 30.914,15.708c12.934,-0.096 22.639,-2.831 29.516,-11.926c5.423,-7.173 4.984,-19.165 -1.863,-26.447c-7.196,-7.653 -23.545,-3.545 -28.297,-5.175Z;"
          fill="freeze"
        calcMode="spline"
        keySplines="0.61 0.28 0 1; 0.22 0.51 0.77 0.33; 0.58 0.27 0.2 1; 0.58 0.27 0.2 1">

      </path>

      <path d="M72.797,38.739c2.857,1.348 6.863,5.011 5.737,7.652c-1.156,2.712 -5.177,2.953 -8.023,1.58c-3.224,-1.554 -7.572,-4.433 -5.517,-7.792c1.539,-2.515 4.885,-2.817 7.803,-1.44Z" fill-rule="nonzero"style="fill:white; opacity: 0.2">
              <animate dur="1s" repeatCount="indefinite" attributeName="d" values="M72.797,38.739c2.857,1.348 6.863,5.011 5.737,7.652c-1.156,2.712 -5.177,2.953 -8.023,1.58c-3.224,-1.554 -7.572,-4.433 -5.517,-7.792c1.539,-2.515 4.885,-2.817 7.803,-1.44Z;

              M70.942,48.474c2.669,-1.69 7.907,-3.111 9.534,-0.745c1.671,2.428 -2.117,6.036 -4.8,7.703c-3.04,1.89 -13.297,5.963 -15.033,2.428c-1.299,-2.646 7.573,-7.659 10.299,-9.386Z;

              M60.954,35.867c2.525,-1.899 7.029,2.951 8.84,5.179c1.859,2.287 0.607,7.315 -1.934,9.192c-2.879,2.126 -6.57,3.962 -8.583,0.577c-1.507,-2.533 -0.902,-13.009 1.677,-14.948Z;

              M72.235,38.636c2.994,1.008 7.398,4.181 6.586,6.935c-0.833,2.827 -4.799,3.534 -7.785,2.501c-3.382,-1.17 -10.173,-3.68 -8.522,-7.255c1.236,-2.676 6.662,-3.209 9.721,-2.181Z;

              M72.797,38.739c2.857,1.348 6.863,5.011 5.737,7.652c-1.156,2.712 -5.177,2.953 -8.023,1.58c-3.224,-1.554 -7.572,-4.433 -5.517,-7.792c1.539,-2.515 4.885,-2.817 7.803,-1.44Z;"
          fill="freeze"
          calcMode="spline"
          keySplines="0.61 0.28 0 1; 0.14 1 0.77 0.33; 0.58 0.27 0.2 1; 0.58 0.27 0.2 1">
      </path>

      <defs>
          <linearGradient id="linear_blob2" x1="0" y1="0" x2="1" y2="0" gradientUnits="userSpaceOnUse" gradientTransform="matrix(45.7569,-39.1744,39.1744,45.7569,19.4679,67.8736)">
            <stop offset="0" style="stop-color:rgb(205,123,103);stop-opacity:0.77"/>
            <stop offset="1" style="stop-color:rgb(114,195,211);stop-opacity:0.77"/>
      </defs>
    </svg>
    <svg class="loading-blob" id="loading-blob3" viewBox="0 0 100 100">
          <path d="M64.276,25.442c-8.485,8.884 -18.431,1.78 -33.749,6.656c-12.498,3.978 -11.558,21.482 -8.325,28.805c3.93,8.901 23.254,18.199 36.692,9.951c13.244,-8.129 8.833,-30.679 18.923,-33.85c8.497,-2.67 20.516,-17.257 10.839,-22.795c-10.17,-5.821 -17.561,4.093 -24.38,11.233Z" fill-rule="nonzero"style="fill:url(#linear_blob3);">
            <animate dur="1s" repeatCount="indefinite" attributeName="d" values="M64.276,25.442c-8.485,8.884 -18.431,1.78 -33.749,6.656c-12.498,3.978 -11.558,21.482 -8.325,28.805c3.93,8.901 23.254,18.199 36.692,9.951c13.244,-8.129 8.833,-30.679 18.923,-33.85c8.497,-2.67 20.516,-17.257 10.839,-22.795c-10.17,-5.821 -17.561,4.093 -24.38,11.233Z;

            M24.475,32.321c-4.937,-1.842 -19.847,-2.896 -21.127,9.374c-1.072,10.275 14.85,11.941 18.083,19.263c3.93,8.901 -5.179,14.906 2.468,23.711c7.519,8.659 24.999,6.288 29.371,-8.012c3.678,-12.027 -1.112,-20.846 -6.939,-28.357c-5.974,-7.699 -17.195,-14.241 -21.856,-15.979Z;



              M64.276,25.442c-8.485,8.884 -18.431,1.78 -33.749,6.656c-12.498,3.978 -11.558,21.482 -8.325,28.805c3.93,8.901 23.254,18.199 36.692,9.951c13.244,-8.129 8.833,-30.679 18.923,-33.85c8.497,-2.67 20.516,-17.257 10.839,-22.795c-10.17,-5.821 -17.561,4.093 -24.38,11.233Z;"
          fill="freeze"
        calcMode="spline"
        keySplines="1 0 0.31 0.9; 1 0 0.21 1">

      </path>

      <path d="M58.875,47.769c1.457,-5.641 11.762,-15.639 13.175,-13.14c1.123,1.988 -3.058,5.942 -3.821,10.575c-0.864,5.248 -1.865,10.573 -5.681,9.598c-2.856,-0.73 -4.481,-3.909 -3.673,-7.033Z" fill-rule="nonzero"style="fill:white; opacity: 0.2">
              <animate dur="1s" repeatCount="indefinite" attributeName="d" values="M58.875,47.769c1.457,-5.641 11.762,-15.639 13.175,-13.14c1.123,1.988 -3.058,5.942 -3.821,10.575c-0.864,5.248 -1.865,10.573 -5.681,9.598c-2.856,-0.73 -4.481,-3.909 -3.673,-7.033Z;

              M46.813,67.491c0.13,-3.764 -1.348,-6.131 -0.2,-7.549c0.834,-1.03 4.331,-1.051 4.889,4.601c0.521,5.293 -0.096,8.605 -2.959,8.887c-2.933,0.289 -1.841,-2.714 -1.73,-5.939Z;

              M58.875,47.769c1.457,-5.641 11.762,-15.639 13.175,-13.14c1.123,1.988 -3.058,5.942 -3.821,10.575c-0.864,5.248 -1.865,10.573 -5.681,9.598c-2.856,-0.73 -4.481,-3.909 -3.673,-7.033Z;"
          fill="freeze"
          calcMode="spline"
          keySplines="0.91 0 0.48 0.7; 0.78 0 0.36 0.86">
      </path>

      <defs>
          <linearGradient id="linear_blob3" x1="0" y1="0" x2="1" y2="0" gradientUnits="userSpaceOnUse" gradientTransform="matrix(45.7569,-39.1744,39.1744,45.7569,19.4679,67.8736)">
            <stop offset="0" style="stop-color:rgb(205,123,103);stop-opacity:0.77"/>
            <stop offset="1" style="stop-color:rgb(114,195,211);stop-opacity:0.77"/>
      </defs>
    </svg>
  </div>
  <div id="screenreadernotification" role="status" aria-live="polite">
  </div>
 <div id="templateArea">
  <!--template feedback-form: -->
  <div id="template-feedback-form" class="content template">
    <div class="" id="feedback-type-wrapper">
      <div class="form-radios">
          <label for="edit-field-feedback-type-und">what is your feedback about?</label>
         <div id="edit-field-feedback-type-und" class="form-radios">
           <div class="form-item form-type-radio form-item-field-feedback-type-und">
             <input type="radio" id="edit-field-feedback-type-und-25"
             name="field_feedback_type[und]" value="bug" class="form-radio">  <label class="option" for="edit-field-feedback-type-und-25">a bug </label>
           </div>
          <div class="form-item form-type-radio form-item-field-feedback-type-und">
           <input type="radio" id="edit-field-feedback-type-und-26" name="field_feedback_type[und]" value="enhancement" class="form-radio">
           <label class="option" for="edit-field-feedback-type-und-26">an enhancement </label>
          </div>
          <div class="form-item form-type-radio form-item-field-feedback-type-und">
           <input type="radio" id="edit-field-feedback-type-und-27" name="field_feedback_type[und]" value="comment" class="form-radio">
           <label class="option" for="edit-field-feedback-type-und-27">just a comment </label>
          </div>
        </div>
      </div>
    </div>
    <div class="field-name-body" id="edit-body">
        <label for="feedback-body">details</label>
        <div class="">
          <textarea id="feedback-body" name="feedback-body" cols="60" rows="20" placeholder="please tell us the details"></textarea>
        </div>
    </div>
    <div class="" id="feedback-allow-contact-wrapper">
      <div class="form-item form-type-checkbox form-item-field-allow-contact-und">
        <input type="checkbox" id="feedback-allow-contact" name="feedback-allow-contact" value="1" checked="checked" class="form-checkbox">
        <label class="option" for="feedback-allow-contact">  you allow us to contact you to better understand your message </label>
      </div>
    </div>
    <div class="" id="feedback-img-upload-wrapper">
      <label for="feedback-img">add an image/screenshot to your feedback</label><br>
      <input type="file" name="feedback-img" id="feedback-img-upload" value="">
    </div>
  </div>
  <!-- end of template feedback-form -->
  <div id="templateExportControlArea">
    <div class="controlarea">
            <!-- first-slide -->
            <a href="#slide1" class="controlarea_first-slide controlbutton controlbuttonbottomfirst"  title="first page">
              <span class="screenreader-only">first page</span>
              <!-- <img src="/editor/images/buttons/ctrlbuttonfirst.png"> -->

            </a>
            <!-- previous-slide -->
            <a href="#previous" class="controlarea_previous-slide controlbutton" title="page before">
              <span class="screenreader-only">page before</span>
              <!-- <img src="/editor/images/buttons/ctrlbuttonbefore.png"> -->
            </a>
            <!-- next-slide -->
            <a href="#next"class="controlarea_next-slide controlbutton controlbuttonbottomnext" title="next page">
              <span class="screenreader-only">next page</span>
              <!-- <img src="/editor/images/buttons/ctrlbuttonnext.png"> -->
            </a>
            <!-- last slide -->
            <a href="#last" class="controlarea_last-slide controlbutton"  title="last page">
              <span class="screenreader-only">last page</span>
              <!-- <img src="/editor/images/buttons/ctrlbuttonlast.png"> -->
            </a>
      </div>
  </div>
  <!-- template for license-dialog -->
  <div id="templateLicenseDialog">
    <div class="teaser">
      slidenotes.io makes use of third-party-librarys under the hood.
      We want to thank all contributors and specialy the mantainers of the following projects
      which helped building slidenotes.io
    </div>
    <div class="3rdPartyLibrary">
      <a class="projectlink" href="https://github.com/gionkunz/chartist-js/" target="_blank">
      chartist<a>
      <div class="copyright-note">
        Copyright © 2017 Gion Kunz
      </div>
      <a class="licenselink" href="#licenseMIT">
        License: MIT
      </a>
    </div>
    <div class="3rdPartyLibrary">
      <a class="projectlink" href="https://github.com/eligrey/FileSaver.js" target="_blank">
        FileSaver.js
      <a>
      <div class="copyright-note">
        Copyright © 2016 Eli Grey.
      </div>
      <a class="licenselink" href="#licenseMIT">
        License: MIT
      </a>
    </div>
    <div class="3rdPartyLibrary">
      <a class="projectlink" href="https://highlightjs.org" target="_blank">
        highlightjs
      <a>
      <div class="copyright-note">
        Copyright (c) 2006, Ivan Sagalaev
      </div>
      <a class="licenselink" href="#licenseBSD">
        License: BSD
      </a>
    </div>
    <div class="3rdPartyLibrary">
      <a class="projectlink" href="https://katex.org" target="_blank">
        katex
      <a>
      <div class="copyright-note">
        Copyright (c) 2013-2020 Khan Academy and other contributors
      </div>
      <a class="licenselink" href="#licenseMIT">
        License: MIT
      </a>
    </div>
    <hr>
    <div class="license" id="licenseMIT">
        <h3>The MIT License</h3>
        <p>
          Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
        </p><p>
          The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
        </p><p>
          THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
        </p>
    </div>

    <div class="license" id="licenseBSD">
        <h3>
          The BSD License
        </h3>
        <p>
          Redistribution and use in source and binary forms, with or without
          modification, are permitted provided that the following conditions are met:
        </p><p>
          * Redistributions of source code must retain the above copyright
          notice, this list of conditions and the following disclaimer.
          * Redistributions in binary form must reproduce the above copyright
          notice, this list of conditions and the following disclaimer in the
          documentation and/or other materials provided with the distribution.
          * Neither the name of highlight.js nor the names of its contributors
          may be used to endorse or promote products derived from this software
          without specific prior written permission.
        </p><p>
          THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND ANY
          EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
          WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
          DISCLAIMED. IN NO EVENT SHALL THE REGENTS AND CONTRIBUTORS BE LIABLE FOR ANY
          DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
          (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
          LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
          ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
          (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
          SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        </p>
    </div>
  </div>
  <!--end of license-template-->
  <-- template for encryption-help-dialog:-->
  <div id="template-encryption-help-dialog">
    <p>
    as a matter of principle: everything you write is encrypted before we even store it on our server.
    </p><p>
    this level of security means that we ourselves have no access to your passwords of encrypted slidenotes, encrypted presentations or encrypted export files.
    </p><p>
    in short: apart from your login password, passwords can not be restored. we recommend using a password manager.
    </p>
  </div>
 </div>


</body>
</html>
